import asyncio
import sys
import json
sys.path.append('.')
from app.services.llm_service import get_llm_service

async def test_frontend_flow():
    """Test the exact flow that the frontend uses"""
    print("Testing frontend LLM generation flow...")
    
    llm = get_llm_service()
    
    # Step 1: Generate attributes using LLM (same as frontend)
    try:
        regulatory_context = """Generate comprehensive test attributes for regulatory compliance report.
Document: CECL_Specification.pdf
Document Type: Regulatory Specification
File Size: 1024000 bytes

Please generate ALL attributes required for financial regulatory compliance testing. Include attributes for:
- Entity identification (borrower info, account details)
- Financial data (amounts, balances, ratios)  
- Date fields (origination, maturity, reporting dates)
- Status and classification fields
- Risk and compliance indicators
- Data quality and validation flags

Generate a comprehensive list that covers the entire regulatory schedule/report."""

        result = await llm.generate_test_attributes(
            regulatory_context,
            'Compliance Report',
            'gemini'
        )
        
        print(f"LLM Generation Result:")
        print(f"  Success: {result.get('success')}")
        print(f"  Discovered: {result.get('discovered_count')}")
        print(f"  Detailed: {result.get('detailed_count')}")
        print(f"  Method: {result.get('method')}")
        
        if not result.get('success'):
            print(f"  Error: {result.get('error')}")
            return
        
        attributes = result.get('attributes', [])
        print(f"  Total attributes generated: {len(attributes)}")
        
        if not attributes:
            print("  No attributes generated!")
            return
        
        # Step 2: Simulate frontend attribute saving validation
        print(f"\nValidating attributes for database saving...")
        
        valid_count = 0
        invalid_count = 0
        
        for i, attr in enumerate(attributes):
            # Simulate the frontend CreateAttributeRequest validation
            try:
                attribute_data = {
                    'attribute_name': attr.get('attribute_name') or attr.get('name'),
                    'description': attr.get('description') or 'Generated by LLM',
                    'data_type': attr.get('data_type') or 'String',
                    'mandatory_flag': attr.get('mandatory_flag') or 'Optional',
                    'cde_flag': attr.get('cde_flag', False),
                    'historical_issues_flag': attr.get('historical_issues_flag', False),
                    'tester_notes': attr.get('tester_notes') or 'Generated by LLM',
                    'validation_rules': attr.get('validation_rules') or '',
                    'typical_source_documents': attr.get('typical_source_documents') or '',
                    'keywords_to_look_for': attr.get('keywords_to_look_for') or '',
                    'testing_approach': attr.get('testing_approach') or ''
                }
                
                # Check for required fields
                required_fields = ['attribute_name', 'description', 'data_type', 'mandatory_flag']
                missing_fields = [field for field in required_fields if not attribute_data.get(field)]
                
                if missing_fields:
                    print(f"  Attribute {i+1} INVALID - missing: {missing_fields}")
                    print(f"    Raw: {attr}")
                    invalid_count += 1
                else:
                    valid_count += 1
                    if i < 3:  # Show first 3 valid attributes
                        print(f"  Attribute {i+1} VALID: {attribute_data['attribute_name']} ({attribute_data['data_type']}) - {attribute_data['mandatory_flag']}")
                        
            except Exception as e:
                print(f"  Attribute {i+1} ERROR: {str(e)}")
                invalid_count += 1
        
        print(f"\nValidation Summary:")
        print(f"  Valid attributes: {valid_count}")
        print(f"  Invalid attributes: {invalid_count}")
        print(f"  Success rate: {valid_count/(valid_count+invalid_count)*100:.1f}%")
        
        if valid_count == 0:
            print("\n❌ NO VALID ATTRIBUTES - This explains why nothing is saved!")
        elif invalid_count > 0:
            print(f"\n⚠️  {invalid_count} attributes would fail to save due to validation errors")
        else:
            print(f"\n✅ All {valid_count} attributes should save successfully")
            
    except Exception as e:
        print(f"Exception during LLM generation: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_frontend_flow()) 