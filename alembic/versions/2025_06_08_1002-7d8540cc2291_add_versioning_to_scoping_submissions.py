"""add_versioning_to_scoping_submissions

Revision ID: 7d8540cc2291
Revises: 2a690861a41b
Create Date: 2025-06-08 10:02:56.989556

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7d8540cc2291'
down_revision: Union[str, None] = '2a690861a41b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_test_executions_execution_id'), table_name='test_executions')
    op.drop_constraint('observation_records_source_test_execution_id_fkey', 'observation_records', type_='foreignkey')
    op.drop_table('test_executions')
    op.add_column('observation_management_audit_logs', sa.Column('source_test_execution_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'observation_management_audit_logs', 'testing_test_executions', ['source_test_execution_id'], ['execution_id'])
    op.create_foreign_key(None, 'observation_records', 'testing_test_executions', ['source_test_execution_id'], ['execution_id'])
    op.alter_column('regulatory_data_dictionary', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('regulatory_data_dictionary', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_regulatory_data_dictionary_dict_id'), 'regulatory_data_dictionary', ['dict_id'], unique=False)
    # op.add_column('scoping_submissions', sa.Column('version', sa.Integer(), nullable=False))
    # op.add_column('scoping_submissions', sa.Column('previous_version_id', sa.Integer(), nullable=True))
    # op.add_column('scoping_submissions', sa.Column('changes_from_previous', sa.JSON(), nullable=True))
    # op.add_column('scoping_submissions', sa.Column('revision_reason', sa.Text(), nullable=True))
    op.create_foreign_key(None, 'scoping_submissions', 'scoping_submissions', ['previous_version_id'], ['submission_id'])
    op.drop_constraint(op.f('testing_test_executions_assigned_tester_id_fkey'), 'testing_test_executions', type_='foreignkey')
    op.drop_column('testing_test_executions', 'assigned_tester_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('testing_test_executions', sa.Column('assigned_tester_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('testing_test_executions_assigned_tester_id_fkey'), 'testing_test_executions', 'users', ['assigned_tester_id'], ['user_id'])
    op.drop_constraint(None, 'scoping_submissions', type_='foreignkey')
    # op.drop_column('scoping_submissions', 'revision_reason')
    # op.drop_column('scoping_submissions', 'changes_from_previous')
    # op.drop_column('scoping_submissions', 'previous_version_id')
    # op.drop_column('scoping_submissions', 'version')
    op.drop_index(op.f('ix_regulatory_data_dictionary_dict_id'), table_name='regulatory_data_dictionary')
    op.alter_column('regulatory_data_dictionary', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('regulatory_data_dictionary', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(None, 'observation_records', type_='foreignkey')
    op.create_foreign_key(op.f('observation_records_source_test_execution_id_fkey'), 'observation_records', 'test_executions', ['source_test_execution_id'], ['execution_id'])
    op.drop_constraint(None, 'observation_management_audit_logs', type_='foreignkey')
    op.drop_column('observation_management_audit_logs', 'source_test_execution_id')
    op.create_table('test_executions',
    sa.Column('execution_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('cycle_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('report_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sample_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('attribute_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('test_run_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('source_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expected_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('test_result', postgresql.ENUM('Pass', 'Fail', 'Exception', name='test_result_enum'), autoincrement=False, nullable=True),
    sa.Column('discrepancy_details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_source_type', postgresql.ENUM('Document', 'Database', name='data_source_type_enum'), autoincrement=False, nullable=True),
    sa.Column('data_source_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('table_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('column_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('executed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('executed_by', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['attribute_id'], ['report_attributes.attribute_id'], name=op.f('test_executions_attribute_id_fkey')),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], name=op.f('test_executions_cycle_id_fkey')),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.data_source_id'], name=op.f('test_executions_data_source_id_fkey')),
    sa.ForeignKeyConstraint(['document_id'], ['documents.document_id'], name=op.f('test_executions_document_id_fkey')),
    sa.ForeignKeyConstraint(['executed_by'], ['users.user_id'], name=op.f('test_executions_executed_by_fkey')),
    sa.ForeignKeyConstraint(['report_id'], ['reports.report_id'], name=op.f('test_executions_report_id_fkey')),
    sa.ForeignKeyConstraint(['sample_id'], ['samples.sample_id'], name=op.f('test_executions_sample_id_fkey')),
    sa.PrimaryKeyConstraint('execution_id', name=op.f('test_executions_pkey'))
    )
    op.create_index(op.f('ix_test_executions_execution_id'), 'test_executions', ['execution_id'], unique=False)
    # ### end Alembic commands ###
