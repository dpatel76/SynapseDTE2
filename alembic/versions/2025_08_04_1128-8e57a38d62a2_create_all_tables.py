"""create_all_tables

Revision ID: 8e57a38d62a2
Revises: 
Create Date: 2025-08-04 11:28:24.965465

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8e57a38d62a2'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('lobs',
    sa.Column('lob_id', sa.Integer(), nullable=False),
    sa.Column('lob_name', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.PrimaryKeyConstraint('lob_id')
    )
    op.create_index(op.f('ix_lobs_lob_id'), 'lobs', ['lob_id'], unique=False)
    op.create_index(op.f('ix_lobs_lob_name'), 'lobs', ['lob_name'], unique=True)
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('role', postgresql.ENUM('Tester', 'Test Executive', 'Report Owner', 'Report Executive', 'Data Owner', 'Data Executive', 'Admin', name='user_role_enum'), nullable=False),
    sa.Column('lob_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['lob_id'], ['lobs.lob_id'], ),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    op.create_table('activity_definitions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phase_name', sa.String(length=50), nullable=False),
    sa.Column('activity_name', sa.String(length=100), nullable=False),
    sa.Column('activity_code', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('activity_type', sa.String(length=50), nullable=False),
    sa.Column('requires_backend_action', sa.Boolean(), nullable=True),
    sa.Column('backend_endpoint', sa.String(length=200), nullable=True),
    sa.Column('sequence_order', sa.Integer(), nullable=False),
    sa.Column('depends_on_activity_codes', sa.JSON(), nullable=True),
    sa.Column('button_text', sa.String(length=50), nullable=True),
    sa.Column('success_message', sa.String(length=200), nullable=True),
    sa.Column('instructions', sa.String(length=500), nullable=True),
    sa.Column('can_skip', sa.Boolean(), nullable=True),
    sa.Column('can_reset', sa.Boolean(), nullable=True),
    sa.Column('auto_complete_on_condition', sa.JSON(), nullable=True),
    sa.Column('conditional_skip_rules', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('activity_code'),
    sa.UniqueConstraint('phase_name', 'activity_name', name='uq_phase_activity')
    )
    op.create_index('idx_activity_code', 'activity_definitions', ['activity_code'], unique=False)
    op.create_index('idx_activity_phase_sequence', 'activity_definitions', ['phase_name', 'sequence_order'], unique=False)
    op.create_table('assignment_templates',
    sa.Column('template_id', sa.String(length=36), nullable=False),
    sa.Column('template_name', sa.String(length=255), nullable=False),
    sa.Column('assignment_type', postgresql.ENUM('Data Upload Request', 'File Review', 'File Approval', 'Document Review', 'Data Validation', 'Scoping Approval', 'Sample Selection Approval', 'Rule Approval', 'Observation Approval', 'Report Approval', 'Version Approval', 'Phase Review', 'Phase Approval', 'Phase Completion', 'Workflow Progression', 'LOB Assignment', 'Test Execution Review', 'Quality Review', 'Compliance Review', 'Risk Assessment', 'Information Request', 'Clarification Required', 'Additional Data Required', 'Role Assignment', 'Permission Grant', 'System Configuration', name='universal_assignment_type_enum'), nullable=False),
    sa.Column('from_role', sa.String(length=50), nullable=False),
    sa.Column('to_role', sa.String(length=50), nullable=False),
    sa.Column('title_template', sa.String(length=255), nullable=False),
    sa.Column('description_template', sa.Text(), nullable=True),
    sa.Column('task_instructions_template', sa.Text(), nullable=True),
    sa.Column('default_priority', postgresql.ENUM('Low', 'Medium', 'High', 'Critical', 'Urgent', name='universal_assignment_priority_enum'), nullable=False),
    sa.Column('default_due_days', sa.Integer(), nullable=True),
    sa.Column('requires_approval', sa.Boolean(), nullable=False),
    sa.Column('approval_role', sa.String(length=50), nullable=True),
    sa.Column('context_type', postgresql.ENUM('Test Cycle', 'Report', 'Phase', 'Attribute', 'Sample', 'Rule', 'Observation', 'File', 'System', 'User', name='universal_context_type_enum'), nullable=False),
    sa.Column('workflow_step', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('template_id')
    )
    op.create_index(op.f('ix_assignment_templates_template_id'), 'assignment_templates', ['template_id'], unique=False)
    op.create_table('audit_logs',
    sa.Column('audit_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('table_name', sa.String(length=100), nullable=True),
    sa.Column('record_id', sa.Integer(), nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('audit_id')
    )
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_audit_logs_audit_id'), 'audit_logs', ['audit_id'], unique=False)
    op.create_table('rbac_permissions',
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('resource', sa.String(length=100), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('permission_id'),
    sa.UniqueConstraint('resource', 'action', name='uq_resource_action')
    )
    op.create_index(op.f('ix_rbac_permissions_action'), 'rbac_permissions', ['action'], unique=False)
    op.create_index(op.f('ix_rbac_permissions_permission_id'), 'rbac_permissions', ['permission_id'], unique=False)
    op.create_index(op.f('ix_rbac_permissions_resource'), 'rbac_permissions', ['resource'], unique=False)
    op.create_table('rbac_resources',
    sa.Column('resource_id', sa.Integer(), nullable=False),
    sa.Column('resource_name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('parent_resource_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_resource_id'], ['rbac_resources.resource_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('resource_id')
    )
    op.create_index(op.f('ix_rbac_resources_resource_id'), 'rbac_resources', ['resource_id'], unique=False)
    op.create_index(op.f('ix_rbac_resources_resource_name'), 'rbac_resources', ['resource_name'], unique=True)
    op.create_index(op.f('ix_rbac_resources_resource_type'), 'rbac_resources', ['resource_type'], unique=False)
    op.create_table('rbac_roles',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('role_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_system', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('role_id')
    )
    op.create_index(op.f('ix_rbac_roles_role_id'), 'rbac_roles', ['role_id'], unique=False)
    op.create_index(op.f('ix_rbac_roles_role_name'), 'rbac_roles', ['role_name'], unique=True)
    op.create_table('regulatory_data_dictionaries',
    sa.Column('dict_id', sa.Integer(), nullable=False),
    sa.Column('report_name', sa.String(length=255), nullable=False),
    sa.Column('schedule_name', sa.String(length=255), nullable=False),
    sa.Column('line_item_number', sa.String(length=50), nullable=True),
    sa.Column('line_item_name', sa.String(length=500), nullable=False),
    sa.Column('technical_line_item_name', sa.String(length=500), nullable=True),
    sa.Column('mdrm', sa.String(length=50), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('static_or_dynamic', sa.String(length=20), nullable=True),
    sa.Column('mandatory_or_optional', sa.String(length=20), nullable=True),
    sa.Column('format_specification', sa.String(length=200), nullable=True),
    sa.Column('num_reports_schedules_used', sa.String(length=50), nullable=True),
    sa.Column('other_schedule_reference', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('dict_id')
    )
    op.create_index('ix_rdd_item_name_search', 'regulatory_data_dictionaries', ['line_item_name'], unique=False)
    op.create_index('ix_rdd_mandatory_search', 'regulatory_data_dictionaries', ['mandatory_or_optional'], unique=False)
    op.create_index('ix_rdd_report_schedule', 'regulatory_data_dictionaries', ['report_name', 'schedule_name'], unique=False)
    op.create_index(op.f('ix_regulatory_data_dictionaries_dict_id'), 'regulatory_data_dictionaries', ['dict_id'], unique=False)
    op.create_index(op.f('ix_regulatory_data_dictionaries_line_item_name'), 'regulatory_data_dictionaries', ['line_item_name'], unique=False)
    op.create_index(op.f('ix_regulatory_data_dictionaries_mandatory_or_optional'), 'regulatory_data_dictionaries', ['mandatory_or_optional'], unique=False)
    op.create_index(op.f('ix_regulatory_data_dictionaries_report_name'), 'regulatory_data_dictionaries', ['report_name'], unique=False)
    op.create_index(op.f('ix_regulatory_data_dictionaries_schedule_name'), 'regulatory_data_dictionaries', ['schedule_name'], unique=False)
    op.create_table('reports',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('report_name', sa.String(length=255), nullable=False),
    sa.Column('report_number', sa.String(length=50), nullable=False),
    sa.Column('regulation', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('frequency', sa.String(length=100), nullable=True),
    sa.Column('business_unit', sa.String(length=100), nullable=True),
    sa.Column('regulatory_requirement', sa.Boolean(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('report_owner_id', sa.Integer(), nullable=True),
    sa.Column('lob_id', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['lob_id'], ['lobs.lob_id'], ),
    sa.ForeignKeyConstraint(['report_owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_reports_id'), 'reports', ['id'], unique=False)
    op.create_index(op.f('ix_reports_report_name'), 'reports', ['report_name'], unique=False)
    op.create_index(op.f('ix_reports_report_number'), 'reports', ['report_number'], unique=True)
    op.create_table('secure_data_access_logs',
    sa.Column('access_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('table_name', sa.String(length=255), nullable=False),
    sa.Column('column_name', sa.String(length=255), nullable=False),
    sa.Column('record_identifier', sa.String(length=255), nullable=True),
    sa.Column('security_classification', sa.Enum('HRCI', 'CONFIDENTIAL', 'PROPRIETARY', 'PUBLIC', name='securityclassification'), nullable=False),
    sa.Column('access_type', sa.String(length=50), nullable=False),
    sa.Column('access_reason', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('accessed_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('access_id')
    )
    op.create_index('idx_secure_access_classification', 'secure_data_access_logs', ['security_classification', 'accessed_at'], unique=False)
    op.create_index('idx_secure_access_user', 'secure_data_access_logs', ['user_id', 'accessed_at'], unique=False)
    op.create_table('test_cycles',
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('cycle_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('test_executive_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('workflow_id', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['test_executive_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('cycle_id')
    )
    op.create_index(op.f('ix_test_cycles_cycle_id'), 'test_cycles', ['cycle_id'], unique=False)
    op.create_index(op.f('ix_test_cycles_cycle_name'), 'test_cycles', ['cycle_name'], unique=False)
    op.create_index(op.f('ix_test_cycles_workflow_id'), 'test_cycles', ['workflow_id'], unique=False)
    op.create_table('universal_assignments',
    sa.Column('assignment_id', sa.String(length=36), nullable=False),
    sa.Column('assignment_type', postgresql.ENUM('Data Upload Request', 'File Review', 'File Approval', 'Document Review', 'Data Validation', 'Scoping Approval', 'Sample Selection Approval', 'Rule Approval', 'Observation Approval', 'Report Approval', 'Version Approval', 'Phase Review', 'Phase Approval', 'Phase Completion', 'Workflow Progression', 'LOB Assignment', 'Test Execution Review', 'Quality Review', 'Compliance Review', 'Risk Assessment', 'Information Request', 'Clarification Required', 'Additional Data Required', 'Role Assignment', 'Permission Grant', 'System Configuration', name='universal_assignment_type_enum'), nullable=False),
    sa.Column('from_role', sa.String(length=50), nullable=False),
    sa.Column('to_role', sa.String(length=50), nullable=False),
    sa.Column('from_user_id', sa.Integer(), nullable=False),
    sa.Column('to_user_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('task_instructions', sa.Text(), nullable=True),
    sa.Column('context_type', postgresql.ENUM('Test Cycle', 'Report', 'Phase', 'Attribute', 'Sample', 'Rule', 'Observation', 'File', 'System', 'User', name='universal_context_type_enum'), nullable=False),
    sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', postgresql.ENUM('Assigned', 'Acknowledged', 'In Progress', 'Completed', 'Approved', 'Rejected', 'Cancelled', 'Overdue', 'Escalated', 'On Hold', 'Delegated', name='universal_assignment_status_enum'), nullable=False),
    sa.Column('priority', postgresql.ENUM('Low', 'Medium', 'High', 'Critical', 'Urgent', name='universal_assignment_priority_enum'), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('due_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_by_user_id', sa.Integer(), nullable=True),
    sa.Column('completion_notes', sa.Text(), nullable=True),
    sa.Column('completion_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('completion_attachments', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('requires_approval', sa.Boolean(), nullable=False),
    sa.Column('approval_role', sa.String(length=50), nullable=True),
    sa.Column('approved_by_user_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approval_notes', sa.Text(), nullable=True),
    sa.Column('escalated', sa.Boolean(), nullable=False),
    sa.Column('escalated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('escalated_to_user_id', sa.Integer(), nullable=True),
    sa.Column('escalation_reason', sa.Text(), nullable=True),
    sa.Column('delegated_to_user_id', sa.Integer(), nullable=True),
    sa.Column('delegated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delegation_reason', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('assignment_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('workflow_step', sa.String(length=100), nullable=True),
    sa.Column('parent_assignment_id', sa.String(length=36), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['approved_by_user_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['completed_by_user_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['delegated_to_user_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['escalated_to_user_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['from_user_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['parent_assignment_id'], ['universal_assignments.assignment_id'], ),
    sa.ForeignKeyConstraint(['to_user_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('assignment_id')
    )
    op.create_index(op.f('ix_universal_assignments_assignment_id'), 'universal_assignments', ['assignment_id'], unique=False)
    op.create_index(op.f('ix_universal_assignments_assignment_type'), 'universal_assignments', ['assignment_type'], unique=False)
    op.create_index(op.f('ix_universal_assignments_context_type'), 'universal_assignments', ['context_type'], unique=False)
    op.create_index(op.f('ix_universal_assignments_due_date'), 'universal_assignments', ['due_date'], unique=False)
    op.create_index(op.f('ix_universal_assignments_from_role'), 'universal_assignments', ['from_role'], unique=False)
    op.create_index(op.f('ix_universal_assignments_status'), 'universal_assignments', ['status'], unique=False)
    op.create_index(op.f('ix_universal_assignments_to_role'), 'universal_assignments', ['to_role'], unique=False)
    op.create_table('universal_sla_configurations',
    sa.Column('sla_config_id', sa.Integer(), nullable=False),
    sa.Column('sla_type', sa.Enum('DATA_PROVIDER_IDENTIFICATION', 'DATA_PROVIDER_RESPONSE', 'DOCUMENT_SUBMISSION', 'TESTING_COMPLETION', 'OBSERVATION_RESPONSE', 'ISSUE_RESOLUTION', name='slatype'), nullable=False),
    sa.Column('sla_hours', sa.Integer(), nullable=False),
    sa.Column('warning_hours', sa.Integer(), nullable=True),
    sa.Column('escalation_enabled', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('business_hours_only', sa.Boolean(), nullable=False),
    sa.Column('weekend_excluded', sa.Boolean(), nullable=False),
    sa.Column('auto_escalate_on_breach', sa.Boolean(), nullable=False),
    sa.Column('escalation_interval_hours', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('sla_config_id')
    )
    op.create_index(op.f('ix_universal_sla_configurations_sla_config_id'), 'universal_sla_configurations', ['sla_config_id'], unique=False)
    op.create_index(op.f('ix_universal_sla_configurations_sla_type'), 'universal_sla_configurations', ['sla_type'], unique=False)
    op.create_table('workflow_activity_dependencies',
    sa.Column('dependency_id', sa.Integer(), nullable=False),
    sa.Column('phase_name', sa.String(length=100), nullable=False),
    sa.Column('activity_name', sa.String(length=255), nullable=False),
    sa.Column('depends_on_activity', sa.String(length=255), nullable=False),
    sa.Column('dependency_type', sa.String(length=50), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('dependency_id'),
    sa.UniqueConstraint('phase_name', 'activity_name', 'depends_on_activity', name='uq_activity_dependencies_unique')
    )
    op.create_index(op.f('ix_workflow_activity_dependencies_dependency_id'), 'workflow_activity_dependencies', ['dependency_id'], unique=False)
    op.create_table('workflow_activity_templates',
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.Column('phase_name', sa.String(length=100), nullable=False),
    sa.Column('activity_name', sa.String(length=255), nullable=False),
    sa.Column('activity_type', sa.Enum('START', 'TASK', 'REVIEW', 'APPROVAL', 'COMPLETE', 'CUSTOM', name='activitytype'), nullable=False),
    sa.Column('activity_order', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_manual', sa.Boolean(), nullable=False),
    sa.Column('is_optional', sa.Boolean(), nullable=False),
    sa.Column('required_role', sa.String(length=100), nullable=True),
    sa.Column('auto_complete_on_event', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('template_id'),
    sa.UniqueConstraint('phase_name', 'activity_name', name='uq_activity_templates_unique')
    )
    op.create_index('ix_workflow_activity_templates_phase', 'workflow_activity_templates', ['phase_name'], unique=False)
    op.create_index(op.f('ix_workflow_activity_templates_template_id'), 'workflow_activity_templates', ['template_id'], unique=False)
    op.create_table('workflow_metrics',
    sa.Column('metric_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('workflow_type', sa.String(length=100), nullable=False),
    sa.Column('phase_name', sa.String(length=50), nullable=True),
    sa.Column('activity_name', sa.String(length=100), nullable=True),
    sa.Column('step_type', sa.Enum('PHASE', 'ACTIVITY', 'TRANSITION', 'DECISION', 'PARALLEL_BRANCH', 'SUB_WORKFLOW', name='steptype'), nullable=True),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('execution_count', sa.Integer(), nullable=True),
    sa.Column('success_count', sa.Integer(), nullable=True),
    sa.Column('failure_count', sa.Integer(), nullable=True),
    sa.Column('avg_duration', sa.Float(), nullable=True),
    sa.Column('min_duration', sa.Float(), nullable=True),
    sa.Column('max_duration', sa.Float(), nullable=True),
    sa.Column('p50_duration', sa.Float(), nullable=True),
    sa.Column('p90_duration', sa.Float(), nullable=True),
    sa.Column('p95_duration', sa.Float(), nullable=True),
    sa.Column('p99_duration', sa.Float(), nullable=True),
    sa.Column('avg_retry_count', sa.Float(), nullable=True),
    sa.Column('timeout_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('metric_id'),
    sa.UniqueConstraint('workflow_type', 'phase_name', 'activity_name', 'step_type', 'period_start', 'period_end')
    )
    op.create_index('idx_workflow_metrics_phase_period', 'workflow_metrics', ['phase_name', 'period_start'], unique=False)
    op.create_index('idx_workflow_metrics_type_period', 'workflow_metrics', ['workflow_type', 'period_start'], unique=False)
    op.create_table('activity_states',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_name', sa.String(length=50), nullable=False),
    sa.Column('activity_definition_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('started_by', sa.Integer(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('completed_by', sa.Integer(), nullable=True),
    sa.Column('is_blocked', sa.Boolean(), nullable=True),
    sa.Column('blocking_reason', sa.String(length=500), nullable=True),
    sa.Column('blocked_by_activities', sa.JSON(), nullable=True),
    sa.Column('completion_data', sa.JSON(), nullable=True),
    sa.Column('completion_notes', sa.String(length=1000), nullable=True),
    sa.Column('reset_count', sa.Integer(), nullable=True),
    sa.Column('last_reset_at', sa.DateTime(), nullable=True),
    sa.Column('last_reset_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['activity_definition_id'], ['activity_definitions.id'], ),
    sa.ForeignKeyConstraint(['completed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['last_reset_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['started_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cycle_id', 'report_id', 'activity_definition_id', name='uq_activity_state')
    )
    op.create_index('idx_activity_state_context', 'activity_states', ['cycle_id', 'report_id', 'phase_name'], unique=False)
    op.create_index('idx_activity_state_status', 'activity_states', ['status'], unique=False)
    op.create_table('cycle_report_planning_pde_mapping_approval_rules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=True),
    sa.Column('report_id', sa.Integer(), nullable=True),
    sa.Column('rule_name', sa.String(length=255), nullable=False),
    sa.Column('rule_description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('min_llm_confidence', sa.Integer(), nullable=True),
    sa.Column('require_data_source', sa.Boolean(), nullable=True),
    sa.Column('require_business_metadata', sa.Boolean(), nullable=True),
    sa.Column('auto_approve_cde', sa.Boolean(), nullable=True),
    sa.Column('auto_approve_primary_key', sa.Boolean(), nullable=True),
    sa.Column('auto_approve_public_classification', sa.Boolean(), nullable=True),
    sa.Column('max_risk_score_for_auto_approval', sa.Integer(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycle_reports',
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('tester_id', sa.Integer(), nullable=True),
    sa.Column('status', postgresql.ENUM('Not Started', 'In Progress', 'Complete', name='cycle_report_status_enum'), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('workflow_id', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['tester_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('cycle_id', 'report_id')
    )
    op.create_index(op.f('ix_cycle_reports_workflow_id'), 'cycle_reports', ['workflow_id'], unique=False)
    op.create_table('data_sources_v2',
    sa.Column('data_source_id', sa.UUID(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('source_name', sa.String(length=255), nullable=False),
    sa.Column('source_type', sa.Enum('POSTGRESQL', 'MYSQL', 'ORACLE', 'SQLSERVER', 'SNOWFLAKE', 'BIGQUERY', 'REDSHIFT', 'FILE', name='datasourcetype'), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('connection_config', sa.Text(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_validated', sa.Boolean(), nullable=True),
    sa.Column('last_validated_at', sa.DateTime(), nullable=True),
    sa.Column('validation_error', sa.Text(), nullable=True),
    sa.Column('default_date_column', sa.String(length=255), nullable=True),
    sa.Column('default_schema', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('data_source_id')
    )
    op.create_index('idx_datasource_report', 'data_sources_v2', ['report_id', 'is_active'], unique=False)
    op.create_table('historical_data_owner_assignments_deprecated',
    sa.Column('history_id', sa.Integer(), nullable=False),
    sa.Column('report_name', sa.String(length=255), nullable=False),
    sa.Column('attribute_name', sa.String(length=255), nullable=False),
    sa.Column('data_owner_id', sa.Integer(), nullable=False),
    sa.Column('assigned_by', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('completion_status', sa.String(length=50), nullable=False),
    sa.Column('completion_time_hours', sa.Float(), nullable=True),
    sa.Column('success_rating', sa.Float(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['data_owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('history_id')
    )
    op.create_index(op.f('ix_historical_data_owner_assignments_deprecated_attribute_name'), 'historical_data_owner_assignments_deprecated', ['attribute_name'], unique=False)
    op.create_index(op.f('ix_historical_data_owner_assignments_deprecated_history_id'), 'historical_data_owner_assignments_deprecated', ['history_id'], unique=False)
    op.create_index(op.f('ix_historical_data_owner_assignments_deprecated_report_name'), 'historical_data_owner_assignments_deprecated', ['report_name'], unique=False)
    op.create_table('llm_audit_log',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=True),
    sa.Column('report_id', sa.Integer(), nullable=True),
    sa.Column('llm_provider', sa.String(length=50), nullable=False),
    sa.Column('prompt_template', sa.String(length=255), nullable=False),
    sa.Column('request_payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('response_payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('token_usage', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('executed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('executed_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['executed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_index(op.f('ix_llm_audit_log_llm_provider'), 'llm_audit_log', ['llm_provider'], unique=False)
    op.create_index(op.f('ix_llm_audit_log_log_id'), 'llm_audit_log', ['log_id'], unique=False)
    op.create_table('metrics_execution',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_name', sa.String(length=50), nullable=False),
    sa.Column('activity_name', sa.String(length=100), nullable=False),
    sa.Column('user_id', sa.String(length=255), nullable=True),
    sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('end_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_minutes', sa.Float(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('metrics_phases',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_name', sa.String(length=50), nullable=False),
    sa.Column('lob_name', sa.String(length=100), nullable=True),
    sa.Column('total_attributes', sa.Integer(), nullable=True),
    sa.Column('approved_attributes', sa.Integer(), nullable=True),
    sa.Column('attributes_with_issues', sa.Integer(), nullable=True),
    sa.Column('primary_keys', sa.Integer(), nullable=True),
    sa.Column('non_pk_attributes', sa.Integer(), nullable=True),
    sa.Column('total_samples', sa.Integer(), nullable=True),
    sa.Column('approved_samples', sa.Integer(), nullable=True),
    sa.Column('failed_samples', sa.Integer(), nullable=True),
    sa.Column('total_test_cases', sa.Integer(), nullable=True),
    sa.Column('completed_test_cases', sa.Integer(), nullable=True),
    sa.Column('passed_test_cases', sa.Integer(), nullable=True),
    sa.Column('failed_test_cases', sa.Integer(), nullable=True),
    sa.Column('total_observations', sa.Integer(), nullable=True),
    sa.Column('approved_observations', sa.Integer(), nullable=True),
    sa.Column('completion_time_minutes', sa.Float(), nullable=True),
    sa.Column('on_time_completion', sa.Boolean(), nullable=True),
    sa.Column('submissions_for_approval', sa.Integer(), nullable=True),
    sa.Column('data_providers_assigned', sa.Integer(), nullable=True),
    sa.Column('changes_to_data_providers', sa.Integer(), nullable=True),
    sa.Column('rfi_sent', sa.Integer(), nullable=True),
    sa.Column('rfi_completed', sa.Integer(), nullable=True),
    sa.Column('rfi_pending', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rbac_permission_audit_logs',
    sa.Column('audit_id', sa.Integer(), nullable=False),
    sa.Column('action_type', sa.String(length=50), nullable=False),
    sa.Column('target_type', sa.String(length=50), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.Column('performed_by', sa.Integer(), nullable=True),
    sa.Column('performed_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('reason', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['performed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['permission_id'], ['rbac_permissions.permission_id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['rbac_roles.role_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('audit_id')
    )
    op.create_index(op.f('ix_rbac_permission_audit_logs_audit_id'), 'rbac_permission_audit_logs', ['audit_id'], unique=False)
    op.create_index(op.f('ix_rbac_permission_audit_logs_performed_at'), 'rbac_permission_audit_logs', ['performed_at'], unique=False)
    op.create_index(op.f('ix_rbac_permission_audit_logs_target_id'), 'rbac_permission_audit_logs', ['target_id'], unique=False)
    op.create_index(op.f('ix_rbac_permission_audit_logs_target_type'), 'rbac_permission_audit_logs', ['target_type'], unique=False)
    op.create_table('rbac_resource_permissions',
    sa.Column('resource_permission_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('resource_type', sa.String(length=50), nullable=False),
    sa.Column('resource_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('granted', sa.Boolean(), nullable=False),
    sa.Column('granted_by', sa.Integer(), nullable=True),
    sa.Column('granted_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['granted_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['permission_id'], ['rbac_permissions.permission_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('resource_permission_id'),
    sa.UniqueConstraint('user_id', 'resource_type', 'resource_id', 'permission_id', name='uq_user_resource_permission')
    )
    op.create_index(op.f('ix_rbac_resource_permissions_resource_id'), 'rbac_resource_permissions', ['resource_id'], unique=False)
    op.create_index(op.f('ix_rbac_resource_permissions_resource_permission_id'), 'rbac_resource_permissions', ['resource_permission_id'], unique=False)
    op.create_index(op.f('ix_rbac_resource_permissions_resource_type'), 'rbac_resource_permissions', ['resource_type'], unique=False)
    op.create_index(op.f('ix_rbac_resource_permissions_user_id'), 'rbac_resource_permissions', ['user_id'], unique=False)
    op.create_table('rbac_role_hierarchy',
    sa.Column('parent_role_id', sa.Integer(), nullable=False),
    sa.Column('child_role_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['child_role_id'], ['rbac_roles.role_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_role_id'], ['rbac_roles.role_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('parent_role_id', 'child_role_id')
    )
    op.create_table('rbac_role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('granted_by', sa.Integer(), nullable=True),
    sa.Column('granted_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['granted_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['permission_id'], ['rbac_permissions.permission_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['rbac_roles.role_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('rbac_user_permissions',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.Column('granted', sa.Boolean(), nullable=False),
    sa.Column('granted_by', sa.Integer(), nullable=True),
    sa.Column('granted_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['granted_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['permission_id'], ['rbac_permissions.permission_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'permission_id')
    )
    op.create_index(op.f('ix_rbac_user_permissions_expires_at'), 'rbac_user_permissions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_rbac_user_permissions_user_id'), 'rbac_user_permissions', ['user_id'], unique=False)
    op.create_table('rbac_user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('assigned_by', sa.Integer(), nullable=True),
    sa.Column('assigned_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['role_id'], ['rbac_roles.role_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_index(op.f('ix_rbac_user_roles_expires_at'), 'rbac_user_roles', ['expires_at'], unique=False)
    op.create_index(op.f('ix_rbac_user_roles_user_id'), 'rbac_user_roles', ['user_id'], unique=False)
    op.create_table('universal_assignment_history',
    sa.Column('history_id', sa.Integer(), nullable=False),
    sa.Column('assignment_id', sa.String(length=36), nullable=False),
    sa.Column('changed_by_user_id', sa.Integer(), nullable=False),
    sa.Column('changed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('field_changed', sa.String(length=100), nullable=True),
    sa.Column('old_value', sa.Text(), nullable=True),
    sa.Column('new_value', sa.Text(), nullable=True),
    sa.Column('change_reason', sa.Text(), nullable=True),
    sa.Column('change_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['assignment_id'], ['universal_assignments.assignment_id'], ),
    sa.ForeignKeyConstraint(['changed_by_user_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('history_id')
    )
    op.create_index(op.f('ix_universal_assignment_history_history_id'), 'universal_assignment_history', ['history_id'], unique=False)
    op.create_table('universal_sla_escalation_rules',
    sa.Column('escalation_rule_id', sa.Integer(), nullable=False),
    sa.Column('sla_config_id', sa.Integer(), nullable=False),
    sa.Column('escalation_level', sa.Enum('LEVEL_1', 'LEVEL_2', 'LEVEL_3', 'LEVEL_4', name='escalationlevel'), nullable=False),
    sa.Column('escalation_order', sa.Integer(), nullable=False),
    sa.Column('escalate_to_role', sa.String(length=100), nullable=False),
    sa.Column('escalate_to_user_id', sa.Integer(), nullable=True),
    sa.Column('hours_after_breach', sa.Integer(), nullable=False),
    sa.Column('email_template_subject', sa.String(length=255), nullable=False),
    sa.Column('email_template_body', sa.Text(), nullable=False),
    sa.Column('include_managers', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['escalate_to_user_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['sla_config_id'], ['universal_sla_configurations.sla_config_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('escalation_rule_id')
    )
    op.create_index(op.f('ix_universal_sla_escalation_rules_escalation_rule_id'), 'universal_sla_escalation_rules', ['escalation_rule_id'], unique=False)
    op.create_table('universal_sla_violation_trackings',
    sa.Column('violation_id', sa.Integer(), nullable=False),
    sa.Column('sla_config_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('due_date', sa.DateTime(), nullable=False),
    sa.Column('warning_date', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('is_violated', sa.Boolean(), nullable=False),
    sa.Column('violated_at', sa.DateTime(), nullable=True),
    sa.Column('violation_hours', sa.Integer(), nullable=True),
    sa.Column('current_escalation_level', sa.Enum('LEVEL_1', 'LEVEL_2', 'LEVEL_3', 'LEVEL_4', name='escalationlevel'), nullable=True),
    sa.Column('escalation_count', sa.Integer(), nullable=False),
    sa.Column('last_escalated_at', sa.DateTime(), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=False),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.Column('resolution_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['sla_config_id'], ['universal_sla_configurations.sla_config_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('violation_id')
    )
    op.create_index(op.f('ix_universal_sla_violation_trackings_violation_id'), 'universal_sla_violation_trackings', ['violation_id'], unique=False)
    op.create_table('workflow_executions',
    sa.Column('execution_id', sa.String(length=36), nullable=False),
    sa.Column('workflow_id', sa.String(length=100), nullable=False),
    sa.Column('workflow_run_id', sa.String(length=100), nullable=False),
    sa.Column('workflow_type', sa.String(length=100), nullable=False),
    sa.Column('workflow_version', sa.String(length=20), nullable=True),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=True),
    sa.Column('initiated_by', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', 'TIMED_OUT', name='workflowexecutionstatus'), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.Column('input_data', sa.JSON(), nullable=True),
    sa.Column('output_data', sa.JSON(), nullable=True),
    sa.Column('error_details', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['initiated_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('execution_id')
    )
    op.create_index('idx_workflow_executions_cycle', 'workflow_executions', ['cycle_id'], unique=False)
    op.create_index('idx_workflow_executions_started', 'workflow_executions', ['started_at'], unique=False)
    op.create_index('idx_workflow_executions_status', 'workflow_executions', ['status'], unique=False)
    op.create_table('workflow_phases',
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_name', postgresql.ENUM('Planning', 'Data Profiling', 'Scoping', 'Data Provider ID', 'Data Owner Identification', 'Sampling', 'Request Info', 'Testing', 'Observations', 'Sample Selection', 'Data Owner ID', 'Test Execution', 'Preparing Test Report', 'Finalize Test Report', name='workflow_phase_enum'), nullable=False),
    sa.Column('phase_order', sa.Integer(), nullable=False),
    sa.Column('status', postgresql.ENUM('Not Started', 'In Progress', 'Complete', 'Pending Approval', name='phase_status_enum'), nullable=False),
    sa.Column('state', postgresql.ENUM('Not Started', 'In Progress', 'Complete', name='workflow_phase_state_enum'), nullable=False),
    sa.Column('schedule_status', postgresql.ENUM('On Track', 'At Risk', 'Past Due', name='workflow_phase_status_enum'), nullable=False),
    sa.Column('data_requested_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('data_requested_by', sa.Integer(), nullable=True),
    sa.Column('data_received_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rules_generated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('profiling_executed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('risk_level', sa.String(length=20), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('progress_percentage', sa.Integer(), nullable=True),
    sa.Column('estimated_completion_date', sa.Date(), nullable=True),
    sa.Column('sla_deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_sla_breached', sa.Boolean(), nullable=True),
    sa.Column('state_override', postgresql.ENUM('Not Started', 'In Progress', 'Complete', name='workflow_phase_state_enum'), nullable=True),
    sa.Column('status_override', postgresql.ENUM('On Track', 'At Risk', 'Past Due', name='workflow_phase_status_enum'), nullable=True),
    sa.Column('override_reason', sa.Text(), nullable=True),
    sa.Column('override_by', sa.Integer(), nullable=True),
    sa.Column('override_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('planned_start_date', sa.Date(), nullable=True),
    sa.Column('planned_end_date', sa.Date(), nullable=True),
    sa.Column('actual_start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('started_by', sa.Integer(), nullable=True),
    sa.Column('completed_by', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('phase_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['completed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['data_requested_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['override_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['started_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('phase_id')
    )
    op.create_index(op.f('ix_workflow_phases_phase_id'), 'workflow_phases', ['phase_id'], unique=False)
    op.create_table('cycle_report_data_profiling_files',
    sa.Column('file_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('file_id')
    )
    op.create_index(op.f('ix_cycle_report_data_profiling_files_file_id'), 'cycle_report_data_profiling_files', ['file_id'], unique=False)
    op.create_table('cycle_report_data_profiling_highvolume_executions',
    sa.Column('execution_id', sa.UUID(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.UUID(), nullable=True),
    sa.Column('execution_type', sa.String(length=50), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('profiling_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('total_records_profiled', sa.Integer(), nullable=True),
    sa.Column('total_rules_executed', sa.Integer(), nullable=True),
    sa.Column('execution_time_seconds', sa.Integer(), nullable=True),
    sa.Column('records_per_second', sa.Integer(), nullable=True),
    sa.Column('peak_memory_mb', sa.Integer(), nullable=True),
    sa.Column('rules_passed', sa.Integer(), nullable=True),
    sa.Column('rules_failed', sa.Integer(), nullable=True),
    sa.Column('anomalies_detected', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources_v2.data_source_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('execution_id')
    )
    op.create_index('idx_profiling_exec_cycle', 'cycle_report_data_profiling_highvolume_executions', ['cycle_id', 'report_id'], unique=False)
    op.create_index('idx_profiling_exec_status', 'cycle_report_data_profiling_highvolume_executions', ['status', 'start_time'], unique=False)
    op.create_table('cycle_report_data_profiling_uploads',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('file_name', sa.String(length=255), nullable=False),
    sa.Column('file_path', sa.Text(), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('upload_status', sa.String(length=50), server_default='pending', nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cycle_report_data_profiling_uploads_id'), 'cycle_report_data_profiling_uploads', ['id'], unique=False)
    op.create_table('cycle_report_documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('test_case_id', sa.String(length=255), nullable=True),
    sa.Column('document_type', sa.String(length=100), nullable=False),
    sa.Column('document_category', sa.String(length=50), nullable=True),
    sa.Column('original_filename', sa.String(length=500), nullable=False),
    sa.Column('stored_filename', sa.String(length=500), nullable=False),
    sa.Column('file_path', sa.String(length=1000), nullable=False),
    sa.Column('file_size', sa.BigInteger(), nullable=False),
    sa.Column('file_format', sa.String(length=20), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=False),
    sa.Column('file_hash', sa.String(length=64), nullable=True),
    sa.Column('is_encrypted', sa.Boolean(), nullable=False),
    sa.Column('encryption_key_id', sa.String(length=100), nullable=True),
    sa.Column('is_confidential', sa.Boolean(), nullable=False),
    sa.Column('document_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('business_date', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('last_integrity_check', sa.DateTime(), nullable=True),
    sa.Column('integrity_verified', sa.Boolean(), nullable=False),
    sa.Column('last_access_session_id', sa.String(length=100), nullable=True),
    sa.Column('last_access_ip', sa.String(length=45), nullable=True),
    sa.Column('last_access_user_agent', sa.Text(), nullable=True),
    sa.Column('document_title', sa.String(length=500), nullable=False),
    sa.Column('document_description', sa.Text(), nullable=True),
    sa.Column('document_version', sa.String(length=20), nullable=False),
    sa.Column('is_latest_version', sa.Boolean(), nullable=False),
    sa.Column('parent_document_id', sa.Integer(), nullable=True),
    sa.Column('access_level', sa.String(length=50), nullable=False),
    sa.Column('allowed_roles', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('allowed_users', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('upload_status', sa.String(length=50), nullable=False),
    sa.Column('processing_status', sa.String(length=50), nullable=False),
    sa.Column('validation_status', sa.String(length=50), nullable=False),
    sa.Column('content_preview', sa.Text(), nullable=True),
    sa.Column('content_summary', sa.Text(), nullable=True),
    sa.Column('extracted_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('search_keywords', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('validation_errors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('validation_warnings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('download_count', sa.Integer(), nullable=False),
    sa.Column('last_downloaded_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_downloaded_by', sa.Integer(), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=False),
    sa.Column('last_viewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_viewed_by', sa.Integer(), nullable=True),
    sa.Column('workflow_stage', sa.String(length=100), nullable=True),
    sa.Column('required_for_completion', sa.Boolean(), nullable=False),
    sa.Column('approval_required', sa.Boolean(), nullable=False),
    sa.Column('approved_by', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approval_notes', sa.Text(), nullable=True),
    sa.Column('retention_period_days', sa.Integer(), nullable=True),
    sa.Column('archive_date', sa.DateTime(timezone=True).with_variant(sa.DateTime(), 'sqlite'), nullable=True),
    sa.Column('delete_date', sa.DateTime(timezone=True).with_variant(sa.DateTime(), 'sqlite'), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('archived_by', sa.Integer(), nullable=True),
    sa.Column('uploaded_by', sa.Integer(), nullable=False),
    sa.Column('uploaded_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("access_level IN ('public', 'phase_restricted', 'role_restricted', 'user_restricted')", name='ck_cycle_report_document_access_level'),
    sa.CheckConstraint("document_type IN ('report_sample_data', 'report_underlying_transaction_data', 'report_source_transaction_data', 'report_source_document')", name='ck_cycle_report_document_type'),
    sa.CheckConstraint("file_format IN ('csv', 'pipe', 'excel', 'xlsx', 'xls', 'word', 'docx', 'pdf', 'jpeg', 'jpg', 'png')", name='ck_cycle_report_document_file_format'),
    sa.CheckConstraint("processing_status IN ('not_processed', 'processing', 'processed', 'failed', 'skipped')", name='ck_cycle_report_document_processing_status'),
    sa.CheckConstraint("upload_status IN ('pending', 'uploading', 'uploaded', 'processing', 'processed', 'failed', 'quarantined')", name='ck_cycle_report_document_upload_status'),
    sa.CheckConstraint("validation_status IN ('not_validated', 'validating', 'valid', 'invalid', 'warning')", name='ck_cycle_report_document_validation_status'),
    sa.CheckConstraint('quality_score IS NULL OR (quality_score >= 0.0 AND quality_score <= 1.0)', name='ck_cycle_report_document_quality_score'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['archived_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['last_downloaded_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['last_viewed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['parent_document_id'], ['cycle_report_documents.id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('phase_id', 'test_case_id', 'original_filename', 'document_version', name='uq_cycle_report_document_phase_testcase_filename_version'),
    sa.UniqueConstraint('stored_filename', name='uq_cycle_report_document_stored_filename')
    )
    op.create_table('cycle_report_planning_attributes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('attribute_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('data_type', postgresql.ENUM('String', 'Integer', 'Decimal', 'Date', 'DateTime', 'Boolean', 'JSON', name='data_type_enum'), nullable=True),
    sa.Column('is_mandatory', postgresql.ENUM('Mandatory', 'Conditional', 'Optional', name='mandatory_flag_enum'), nullable=False),
    sa.Column('is_cde', sa.Boolean(), nullable=False),
    sa.Column('has_issues', sa.Boolean(), nullable=False),
    sa.Column('is_scoped', sa.Boolean(), nullable=False),
    sa.Column('llm_generated', sa.Boolean(), nullable=False),
    sa.Column('llm_rationale', sa.Text(), nullable=True),
    sa.Column('tester_notes', sa.Text(), nullable=True),
    sa.Column('line_item_number', sa.String(length=20), nullable=True, comment='Regulatory line item number from data dictionary'),
    sa.Column('technical_line_item_name', sa.String(length=255), nullable=True, comment='Technical line item name from data dictionary'),
    sa.Column('mdrm', sa.String(length=50), nullable=True, comment='MDRM code from regulatory data dictionary'),
    sa.Column('validation_rules', sa.Text(), nullable=True),
    sa.Column('typical_source_documents', sa.Text(), nullable=True),
    sa.Column('keywords_to_look_for', sa.Text(), nullable=True),
    sa.Column('testing_approach', sa.Text(), nullable=True),
    sa.Column('risk_score', sa.Float(), nullable=True, comment='LLM-provided risk score (0-10) based on regulatory importance'),
    sa.Column('llm_risk_rationale', sa.Text(), nullable=True, comment='LLM explanation for the assigned risk score'),
    sa.Column('is_primary_key', sa.Boolean(), nullable=False, comment='Whether this attribute is part of the primary key'),
    sa.Column('primary_key_order', sa.Integer(), nullable=True, comment='Order of this attribute in composite primary key (1-based)'),
    sa.Column('information_security_classification', postgresql.ENUM('Public', 'Internal', 'Confidential', 'Restricted', 'HRCI', name='security_classification_enum'), nullable=True, comment='Security classification: HRCI, Confidential, Proprietary, Public'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Approval status: pending, approved, rejected'),
    sa.Column('master_attribute_id', sa.Integer(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False, comment='Version number of this attribute'),
    sa.Column('is_latest_version', sa.Boolean(), nullable=False, comment='Whether this is the latest version'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Whether this version is active'),
    sa.Column('version_notes', sa.Text(), nullable=True, comment='Notes about what changed in this version'),
    sa.Column('change_reason', sa.String(length=100), nullable=True, comment='Reason for creating new version'),
    sa.Column('replaced_attribute_id', sa.Integer(), nullable=True),
    sa.Column('version_created_at', sa.DateTime(), nullable=False),
    sa.Column('version_created_by', sa.Integer(), nullable=False),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.Column('approved_by', sa.Integer(), nullable=True),
    sa.Column('archived_at', sa.DateTime(), nullable=True),
    sa.Column('archived_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['approved_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['archived_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['master_attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['replaced_attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['version_created_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cycle_report_planning_attributes_attribute_name'), 'cycle_report_planning_attributes', ['attribute_name'], unique=False)
    op.create_index(op.f('ix_cycle_report_planning_attributes_id'), 'cycle_report_planning_attributes', ['id'], unique=False)
    op.create_table('cycle_report_planning_data_sources',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_type', sa.Enum('POSTGRESQL', 'MYSQL', 'ORACLE', 'SQLSERVER', 'MONGODB', 'CSV', 'EXCEL', 'API', 'SFTP', 'S3', name='datasourcetype'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('connection_config', sa.JSON(), nullable=True),
    sa.Column('auth_type', sa.String(length=50), nullable=True),
    sa.Column('auth_config', sa.JSON(), nullable=True),
    sa.Column('refresh_schedule', sa.String(length=100), nullable=True),
    sa.Column('last_sync_at', sa.DateTime(), nullable=True),
    sa.Column('last_sync_status', sa.String(length=50), nullable=True),
    sa.Column('last_sync_message', sa.Text(), nullable=True),
    sa.Column('validation_rules', sa.JSON(), nullable=True),
    sa.Column('schema_summary', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycle_report_request_info_audit_logs',
    sa.Column('audit_id', sa.String(length=36), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('entity_id', sa.String(length=36), nullable=True),
    sa.Column('performed_by', sa.Integer(), nullable=False),
    sa.Column('performed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['performed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('audit_id')
    )
    op.create_index(op.f('ix_cycle_report_request_info_audit_logs_action'), 'cycle_report_request_info_audit_logs', ['action'], unique=False)
    op.create_index(op.f('ix_cycle_report_request_info_audit_logs_audit_id'), 'cycle_report_request_info_audit_logs', ['audit_id'], unique=False)
    op.create_table('cycle_report_request_info_evidence_versions',
    sa.Column('version_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_status', postgresql.ENUM('draft', 'pending_approval', 'approved', 'rejected', 'superseded', name='version_status_enum'), server_default='draft', nullable=False),
    sa.Column('parent_version_id', sa.UUID(), nullable=True),
    sa.Column('total_test_cases', sa.Integer(), server_default='0', nullable=False),
    sa.Column('submitted_count', sa.Integer(), server_default='0', nullable=False),
    sa.Column('approved_count', sa.Integer(), server_default='0', nullable=False),
    sa.Column('rejected_count', sa.Integer(), server_default='0', nullable=False),
    sa.Column('pending_count', sa.Integer(), server_default='0', nullable=False),
    sa.Column('document_evidence_count', sa.Integer(), server_default='0', nullable=False),
    sa.Column('data_source_evidence_count', sa.Integer(), server_default='0', nullable=False),
    sa.Column('submission_deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reminder_schedule', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('instructions', sa.Text(), nullable=True),
    sa.Column('submitted_by_id', sa.Integer(), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approved_by_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('report_owner_review_requested_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('report_owner_review_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('report_owner_feedback_summary', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('workflow_execution_id', sa.String(length=255), nullable=True),
    sa.Column('workflow_run_id', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_version_id'], ['cycle_report_request_info_evidence_versions.version_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['submitted_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('version_id')
    )
    op.create_index(op.f('ix_cycle_report_request_info_evidence_versions_phase_id'), 'cycle_report_request_info_evidence_versions', ['phase_id'], unique=False)
    op.create_table('cycle_report_rfi_data_sources',
    sa.Column('data_source_id', sa.UUID(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=True),
    sa.Column('data_owner_id', sa.Integer(), nullable=False),
    sa.Column('source_name', sa.String(length=255), nullable=False),
    sa.Column('connection_type', sa.String(length=50), nullable=False),
    sa.Column('connection_details', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('test_query', sa.Text(), nullable=True),
    sa.Column('last_validated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('validation_status', sa.String(length=50), nullable=True),
    sa.Column('validation_error', sa.Text(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['data_owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('data_source_id'),
    sa.UniqueConstraint('data_owner_id', 'source_name', name='uq_data_source_name_owner')
    )
    op.create_index(op.f('ix_cycle_report_rfi_data_sources_data_source_id'), 'cycle_report_rfi_data_sources', ['data_source_id'], unique=False)
    op.create_table('cycle_report_test_execution_results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('test_case_id', sa.String(length=255), nullable=False),
    sa.Column('evidence_id', sa.Integer(), nullable=False),
    sa.Column('execution_number', sa.Integer(), nullable=False),
    sa.Column('is_latest_execution', sa.Boolean(), nullable=True),
    sa.Column('execution_reason', sa.String(length=100), nullable=True),
    sa.Column('test_type', sa.String(length=50), nullable=False),
    sa.Column('analysis_method', sa.String(length=50), nullable=False),
    sa.Column('sample_value', sa.Text(), nullable=True),
    sa.Column('extracted_value', sa.Text(), nullable=True),
    sa.Column('expected_value', sa.Text(), nullable=True),
    sa.Column('test_result', sa.String(length=50), nullable=True),
    sa.Column('comparison_result', sa.Boolean(), nullable=True),
    sa.Column('variance_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('llm_confidence_score', sa.Float(), nullable=True),
    sa.Column('llm_analysis_rationale', sa.Text(), nullable=True),
    sa.Column('llm_model_used', sa.String(length=100), nullable=True),
    sa.Column('llm_tokens_used', sa.Integer(), nullable=True),
    sa.Column('llm_response_raw', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('llm_processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('database_query_executed', sa.Text(), nullable=True),
    sa.Column('database_result_count', sa.Integer(), nullable=True),
    sa.Column('database_execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('database_result_sample', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('execution_status', sa.String(length=50), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('analysis_results', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('evidence_validation_status', sa.String(length=50), nullable=True),
    sa.Column('evidence_version_number', sa.Integer(), nullable=True),
    sa.Column('execution_summary', sa.Text(), nullable=True),
    sa.Column('processing_notes', sa.Text(), nullable=True),
    sa.Column('executed_by', sa.Integer(), nullable=False),
    sa.Column('execution_method', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.CheckConstraint("evidence_validation_status IN ('valid', 'approved')", name='ck_test_execution_evidence_approved'),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['executed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('test_case_id', 'execution_number', name='uq_test_execution_results_test_case_execution')
    )
    op.create_index('idx_test_execution_results_created_at', 'cycle_report_test_execution_results', ['created_at'], unique=False)
    op.create_index('idx_test_execution_results_evidence_id', 'cycle_report_test_execution_results', ['evidence_id'], unique=False)
    op.create_index('idx_test_execution_results_executed_by', 'cycle_report_test_execution_results', ['executed_by'], unique=False)
    op.create_index('idx_test_execution_results_execution_status', 'cycle_report_test_execution_results', ['execution_status'], unique=False)
    op.create_index('idx_test_execution_results_phase_id', 'cycle_report_test_execution_results', ['phase_id'], unique=False)
    op.create_index('idx_test_execution_results_test_case_id', 'cycle_report_test_execution_results', ['test_case_id'], unique=False)
    op.create_table('cycle_report_test_report_generation',
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('generation_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('generation_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('generation_duration_ms', sa.Integer(), nullable=True),
    sa.Column('phase_data_collected', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('total_sections', sa.Integer(), nullable=True),
    sa.Column('sections_completed', sa.Integer(), nullable=True),
    sa.Column('output_formats_generated', postgresql.ARRAY(sa.Text()), nullable=True),
    sa.Column('all_approvals_received', sa.Boolean(), nullable=False),
    sa.Column('phase_completion_ready', sa.Boolean(), nullable=False),
    sa.Column('phase_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('phase_completed_by', sa.Integer(), nullable=True),
    sa.Column('generated_by', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['generated_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_completed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('phase_id', name='uq_test_report_generation_phase')
    )
    op.create_index('idx_test_report_generation_cycle_report', 'cycle_report_test_report_generation', ['cycle_id', 'report_id'], unique=False)
    op.create_index('idx_test_report_generation_phase', 'cycle_report_test_report_generation', ['phase_id'], unique=False)
    op.create_index('idx_test_report_generation_status', 'cycle_report_test_report_generation', ['status'], unique=False)
    op.create_index(op.f('ix_cycle_report_test_report_generation_id'), 'cycle_report_test_report_generation', ['id'], unique=False)
    op.create_table('cycle_report_test_report_sections',
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('section_name', sa.String(length=100), nullable=False),
    sa.Column('section_title', sa.String(length=255), nullable=False),
    sa.Column('section_order', sa.Integer(), nullable=False),
    sa.Column('section_type', sa.String(length=50), nullable=False),
    sa.Column('section_content', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('data_sources', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_generated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('requires_refresh', sa.Boolean(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('tester_approved', sa.Boolean(), nullable=False),
    sa.Column('tester_approved_by', sa.Integer(), nullable=True),
    sa.Column('tester_approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('tester_notes', sa.Text(), nullable=True),
    sa.Column('report_owner_approved', sa.Boolean(), nullable=False),
    sa.Column('report_owner_approved_by', sa.Integer(), nullable=True),
    sa.Column('report_owner_approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('report_owner_notes', sa.Text(), nullable=True),
    sa.Column('executive_approved', sa.Boolean(), nullable=False),
    sa.Column('executive_approved_by', sa.Integer(), nullable=True),
    sa.Column('executive_approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('executive_notes', sa.Text(), nullable=True),
    sa.Column('markdown_content', sa.Text(), nullable=True),
    sa.Column('html_content', sa.Text(), nullable=True),
    sa.Column('pdf_path', sa.String(length=500), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['executive_approved_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['report_owner_approved_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['tester_approved_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cycle_id', 'report_id', 'section_name', name='uq_test_report_section_report'),
    sa.UniqueConstraint('phase_id', 'section_name', name='uq_test_report_section_phase')
    )
    op.create_index('idx_test_report_sections_approvals', 'cycle_report_test_report_sections', ['tester_approved', 'report_owner_approved', 'executive_approved'], unique=False)
    op.create_index('idx_test_report_sections_cycle_report', 'cycle_report_test_report_sections', ['cycle_id', 'report_id'], unique=False)
    op.create_index('idx_test_report_sections_phase', 'cycle_report_test_report_sections', ['phase_id'], unique=False)
    op.create_index('idx_test_report_sections_status', 'cycle_report_test_report_sections', ['status'], unique=False)
    op.create_index(op.f('ix_cycle_report_test_report_sections_id'), 'cycle_report_test_report_sections', ['id'], unique=False)
    op.create_table('data_owner_escalation_log',
    sa.Column('email_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('violation_ids', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('escalation_level', postgresql.ENUM('None', 'Level 1', 'Level 2', 'Level 3', name='escalation_level_enum'), nullable=False),
    sa.Column('sent_by', sa.Integer(), nullable=False),
    sa.Column('sent_to', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('cc_recipients', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('email_subject', sa.String(length=255), nullable=False),
    sa.Column('email_body', sa.Text(), nullable=False),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('delivery_status', sa.String(length=50), nullable=False),
    sa.Column('custom_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['sent_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('email_id')
    )
    op.create_index(op.f('ix_data_owner_escalation_log_email_id'), 'data_owner_escalation_log', ['email_id'], unique=False)
    op.create_table('data_owner_notifications',
    sa.Column('notification_id', sa.String(length=36), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('data_owner_id', sa.Integer(), nullable=False),
    sa.Column('assigned_attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('sample_count', sa.Integer(), nullable=False),
    sa.Column('submission_deadline', sa.DateTime(timezone=True), nullable=False),
    sa.Column('portal_access_url', sa.String(length=500), nullable=False),
    sa.Column('custom_instructions', sa.Text(), nullable=True),
    sa.Column('notification_sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('first_access_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_access_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('access_count', sa.Integer(), nullable=False),
    sa.Column('is_acknowledged', sa.Boolean(), nullable=False),
    sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', postgresql.ENUM('Pending', 'In Progress', 'Submitted', 'Validated', 'Requires Revision', 'Overdue', name='submission_status_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['data_owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('notification_id')
    )
    op.create_index(op.f('ix_data_owner_notifications_notification_id'), 'data_owner_notifications', ['notification_id'], unique=False)
    op.create_table('data_owner_phase_audit_log',
    sa.Column('audit_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('entity_id', sa.Integer(), nullable=True),
    sa.Column('performed_by', sa.Integer(), nullable=False),
    sa.Column('performed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['performed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('audit_id')
    )
    op.create_index(op.f('ix_data_owner_phase_audit_log_action'), 'data_owner_phase_audit_log', ['action'], unique=False)
    op.create_index(op.f('ix_data_owner_phase_audit_log_audit_id'), 'data_owner_phase_audit_log', ['audit_id'], unique=False)
    op.create_table('data_queries',
    sa.Column('query_id', sa.UUID(), nullable=False),
    sa.Column('data_source_id', sa.UUID(), nullable=False),
    sa.Column('query_name', sa.String(length=255), nullable=False),
    sa.Column('query_type', sa.String(length=50), nullable=False),
    sa.Column('query_template', sa.Text(), nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('estimated_rows', sa.Integer(), nullable=True),
    sa.Column('execution_timeout_seconds', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources_v2.data_source_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('query_id')
    )
    op.create_index('idx_query_source_type', 'data_queries', ['data_source_id', 'query_type'], unique=False)
    op.create_table('escalation_email_logs',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('sla_violation_id', sa.Integer(), nullable=False),
    sa.Column('escalation_rule_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('sent_at', sa.DateTime(), nullable=False),
    sa.Column('sent_to_emails', sa.Text(), nullable=False),
    sa.Column('email_subject', sa.String(length=255), nullable=False),
    sa.Column('email_body', sa.Text(), nullable=False),
    sa.Column('delivery_status', sa.String(length=50), nullable=False),
    sa.Column('delivery_error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['escalation_rule_id'], ['universal_sla_escalation_rules.escalation_rule_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['sla_violation_id'], ['universal_sla_violation_trackings.violation_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_index(op.f('ix_escalation_email_logs_log_id'), 'escalation_email_logs', ['log_id'], unique=False)
    op.create_table('scoping_audit_log',
    sa.Column('audit_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('performed_by', sa.Integer(), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('previous_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['performed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('audit_id')
    )
    op.create_index(op.f('ix_scoping_audit_log_audit_id'), 'scoping_audit_log', ['audit_id'], unique=False)
    op.create_table('workflow_activities',
    sa.Column('activity_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('phase_name', sa.String(length=100), nullable=False),
    sa.Column('activity_name', sa.String(length=255), nullable=False),
    sa.Column('activity_type', sa.Enum('START', 'TASK', 'REVIEW', 'APPROVAL', 'COMPLETE', 'CUSTOM', name='activitytype'), nullable=False),
    sa.Column('activity_order', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', 'REVISION_REQUESTED', 'BLOCKED', 'SKIPPED', name='activitystatus'), nullable=False),
    sa.Column('can_start', sa.Boolean(), nullable=False),
    sa.Column('can_complete', sa.Boolean(), nullable=False),
    sa.Column('is_manual', sa.Boolean(), nullable=False),
    sa.Column('is_optional', sa.Boolean(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('started_by', sa.Integer(), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_by', sa.Integer(), nullable=True),
    sa.Column('revision_requested_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('revision_requested_by', sa.Integer(), nullable=True),
    sa.Column('revision_reason', sa.Text(), nullable=True),
    sa.Column('blocked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('blocked_reason', sa.Text(), nullable=True),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['completed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['revision_requested_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['started_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('activity_id'),
    sa.UniqueConstraint('cycle_id', 'report_id', 'phase_id', 'activity_name', name='uq_workflow_activities_unique_activity')
    )
    op.create_index(op.f('ix_workflow_activities_activity_id'), 'workflow_activities', ['activity_id'], unique=False)
    op.create_index('ix_workflow_activities_activity_name', 'workflow_activities', ['activity_name'], unique=False)
    op.create_index('ix_workflow_activities_cycle_report', 'workflow_activities', ['cycle_id', 'report_id'], unique=False)
    op.create_index('ix_workflow_activities_cycle_report_phase', 'workflow_activities', ['cycle_id', 'report_id', 'phase_id'], unique=False)
    op.create_index('ix_workflow_activities_phase_id', 'workflow_activities', ['phase_id'], unique=False)
    op.create_index('ix_workflow_activities_status', 'workflow_activities', ['status'], unique=False)
    op.create_table('workflow_alerts',
    sa.Column('alert_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('execution_id', sa.String(length=36), nullable=True),
    sa.Column('workflow_type', sa.String(length=100), nullable=True),
    sa.Column('phase_name', sa.String(length=50), nullable=True),
    sa.Column('alert_type', sa.String(length=50), nullable=False),
    sa.Column('severity', sa.String(length=20), nullable=False),
    sa.Column('threshold_value', sa.Float(), nullable=True),
    sa.Column('actual_value', sa.Float(), nullable=True),
    sa.Column('alert_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('acknowledged', sa.Boolean(), nullable=True),
    sa.Column('acknowledged_by', sa.Integer(), nullable=True),
    sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('resolved', sa.Boolean(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['acknowledged_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['execution_id'], ['workflow_executions.execution_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('alert_id')
    )
    op.create_index('idx_workflow_alerts_severity', 'workflow_alerts', ['severity', 'created_at'], unique=False)
    op.create_index('idx_workflow_alerts_unresolved', 'workflow_alerts', ['resolved', 'created_at'], unique=False)
    op.create_table('workflow_steps',
    sa.Column('step_id', sa.String(length=36), nullable=False),
    sa.Column('execution_id', sa.String(length=36), nullable=False),
    sa.Column('parent_step_id', sa.String(length=36), nullable=True),
    sa.Column('step_name', sa.String(length=100), nullable=False),
    sa.Column('step_type', sa.Enum('PHASE', 'ACTIVITY', 'TRANSITION', 'DECISION', 'PARALLEL_BRANCH', 'SUB_WORKFLOW', name='steptype'), nullable=False),
    sa.Column('phase_name', sa.String(length=50), nullable=True),
    sa.Column('activity_name', sa.String(length=100), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', 'TIMED_OUT', name='workflowexecutionstatus'), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.Column('attempt_number', sa.Integer(), nullable=True),
    sa.Column('max_attempts', sa.Integer(), nullable=True),
    sa.Column('retry_delay_seconds', sa.Integer(), nullable=True),
    sa.Column('input_data', sa.JSON(), nullable=True),
    sa.Column('output_data', sa.JSON(), nullable=True),
    sa.Column('error_details', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['execution_id'], ['workflow_executions.execution_id'], ),
    sa.ForeignKeyConstraint(['parent_step_id'], ['workflow_steps.step_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('step_id')
    )
    op.create_index('idx_workflow_steps_execution', 'workflow_steps', ['execution_id'], unique=False)
    op.create_index('idx_workflow_steps_phase', 'workflow_steps', ['phase_name'], unique=False)
    op.create_index('idx_workflow_steps_status', 'workflow_steps', ['status'], unique=False)
    op.create_table('attribute_lob_assignments_deprecated',
    sa.Column('assignment_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('lob_id', sa.Integer(), nullable=False),
    sa.Column('assigned_by', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('assignment_rationale', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['lob_id'], ['lobs.lob_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('assignment_id')
    )
    op.create_index(op.f('ix_attribute_lob_assignments_deprecated_assignment_id'), 'attribute_lob_assignments_deprecated', ['assignment_id'], unique=False)
    op.create_table('attribute_mappings',
    sa.Column('mapping_id', sa.UUID(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.UUID(), nullable=False),
    sa.Column('table_name', sa.String(length=255), nullable=False),
    sa.Column('column_name', sa.String(length=255), nullable=False),
    sa.Column('data_type', sa.String(length=100), nullable=True),
    sa.Column('security_classification', sa.Enum('HRCI', 'CONFIDENTIAL', 'PROPRIETARY', 'PUBLIC', name='securityclassification'), nullable=False),
    sa.Column('is_primary_key', sa.Boolean(), nullable=True),
    sa.Column('is_nullable', sa.Boolean(), nullable=True),
    sa.Column('column_description', sa.Text(), nullable=True),
    sa.Column('mapping_confidence', sa.Integer(), nullable=True),
    sa.Column('llm_suggested', sa.Boolean(), nullable=True),
    sa.Column('manual_override', sa.Boolean(), nullable=True),
    sa.Column('is_validated', sa.Boolean(), nullable=True),
    sa.Column('validation_error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources_v2.data_source_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('mapping_id')
    )
    op.create_index('idx_mapping_attribute', 'attribute_mappings', ['attribute_id'], unique=False)
    op.create_index('idx_mapping_security', 'attribute_mappings', ['security_classification'], unique=False)
    op.create_index('idx_mapping_source', 'attribute_mappings', ['data_source_id'], unique=False)
    op.create_table('attribute_version_change_logs',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('change_type', postgresql.ENUM('created', 'updated', 'approved', 'rejected', 'archived', 'restored', name='version_change_type_enum'), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('change_notes', sa.Text(), nullable=True),
    sa.Column('changed_at', sa.DateTime(), nullable=False),
    sa.Column('changed_by', sa.Integer(), nullable=False),
    sa.Column('field_changes', sa.Text(), nullable=True),
    sa.Column('impact_assessment', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['changed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_index(op.f('ix_attribute_version_change_logs_log_id'), 'attribute_version_change_logs', ['log_id'], unique=False)
    op.create_table('attribute_version_comparisons',
    sa.Column('comparison_id', sa.Integer(), nullable=False),
    sa.Column('version_a_id', sa.Integer(), nullable=False),
    sa.Column('version_b_id', sa.Integer(), nullable=False),
    sa.Column('differences_found', sa.Integer(), nullable=False),
    sa.Column('comparison_summary', sa.Text(), nullable=True),
    sa.Column('impact_score', sa.Float(), nullable=True),
    sa.Column('compared_at', sa.DateTime(), nullable=False),
    sa.Column('compared_by', sa.Integer(), nullable=False),
    sa.Column('comparison_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['compared_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['version_a_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['version_b_id'], ['cycle_report_planning_attributes.id'], ),
    sa.PrimaryKeyConstraint('comparison_id')
    )
    op.create_index(op.f('ix_attribute_version_comparisons_comparison_id'), 'attribute_version_comparisons', ['comparison_id'], unique=False)
    op.create_table('cycle_report_data_owner_lob_mapping_versions',
    sa.Column('version_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('workflow_activity_id', sa.Integer(), nullable=True),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_status', sa.String(length=50), server_default='draft', nullable=False),
    sa.Column('parent_version_id', sa.UUID(), nullable=True),
    sa.Column('workflow_execution_id', sa.String(length=255), nullable=True),
    sa.Column('workflow_run_id', sa.String(length=255), nullable=True),
    sa.Column('total_lob_attributes', sa.Integer(), server_default='0', nullable=False),
    sa.Column('assigned_lob_attributes', sa.Integer(), server_default='0', nullable=False),
    sa.Column('unassigned_lob_attributes', sa.Integer(), server_default='0', nullable=False),
    sa.Column('data_executive_id', sa.Integer(), nullable=False),
    sa.Column('assignment_batch_date', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('assignment_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.CheckConstraint("version_status IN ('draft', 'active', 'superseded')", name='ck_data_owner_version_status'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['data_executive_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['parent_version_id'], ['cycle_report_data_owner_lob_mapping_versions.version_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workflow_activity_id'], ['workflow_activities.activity_id'], ),
    sa.PrimaryKeyConstraint('version_id'),
    sa.UniqueConstraint('phase_id', 'version_number', name='uq_data_owner_version_phase_number')
    )
    op.create_table('cycle_report_data_profiling_configurations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_type', sa.String(length=50), nullable=False),
    sa.Column('profiling_mode', sa.String(length=50), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=True),
    sa.Column('file_upload_id', sa.Integer(), nullable=True),
    sa.Column('use_timeframe', sa.Boolean(), nullable=True),
    sa.Column('timeframe_start', sa.DateTime(), nullable=True),
    sa.Column('timeframe_end', sa.DateTime(), nullable=True),
    sa.Column('timeframe_column', sa.String(length=255), nullable=True),
    sa.Column('sample_size', sa.Integer(), nullable=True),
    sa.Column('sample_percentage', sa.Float(), nullable=True),
    sa.Column('sample_method', sa.String(length=50), nullable=True),
    sa.Column('partition_column', sa.String(length=255), nullable=True),
    sa.Column('partition_count', sa.Integer(), nullable=True),
    sa.Column('max_memory_mb', sa.Integer(), nullable=True),
    sa.Column('custom_query', sa.Text(), nullable=True),
    sa.Column('table_name', sa.String(length=255), nullable=True),
    sa.Column('schema_name', sa.String(length=255), nullable=True),
    sa.Column('where_clause', sa.Text(), nullable=True),
    sa.Column('exclude_columns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('include_columns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('profile_relationships', sa.Boolean(), nullable=True),
    sa.Column('profile_distributions', sa.Boolean(), nullable=True),
    sa.Column('profile_patterns', sa.Boolean(), nullable=True),
    sa.Column('detect_anomalies', sa.Boolean(), nullable=True),
    sa.Column('is_scheduled', sa.Boolean(), nullable=True),
    sa.Column('schedule_cron', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['data_source_id'], ['cycle_report_planning_data_sources.id'], ),
    sa.ForeignKeyConstraint(['file_upload_id'], ['cycle_report_data_profiling_uploads.id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycle_report_data_profiling_rule_versions',
    sa.Column('version_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('workflow_activity_id', sa.Integer(), nullable=True),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_status', postgresql.ENUM('draft', 'pending_approval', 'approved', 'rejected', 'superseded', name='version_status_enum'), server_default='draft', nullable=False),
    sa.Column('parent_version_id', sa.UUID(), nullable=True),
    sa.Column('workflow_execution_id', sa.String(length=255), nullable=True),
    sa.Column('workflow_run_id', sa.String(length=255), nullable=True),
    sa.Column('total_rules', sa.Integer(), server_default='0', nullable=False),
    sa.Column('approved_rules', sa.Integer(), server_default='0', nullable=False),
    sa.Column('rejected_rules', sa.Integer(), server_default='0', nullable=False),
    sa.Column('data_source_type', postgresql.ENUM('file_upload', 'database_source', name='data_source_type_enum'), nullable=True),
    sa.Column('planning_data_source_id', sa.Integer(), nullable=True),
    sa.Column('source_table_name', sa.String(length=255), nullable=True),
    sa.Column('source_file_path', sa.String(length=500), nullable=True),
    sa.Column('total_records_processed', sa.Integer(), nullable=True),
    sa.Column('overall_quality_score', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('execution_job_id', sa.String(length=255), nullable=True),
    sa.Column('generation_job_id', sa.String(length=255), nullable=True),
    sa.Column('generation_status', sa.String(length=50), nullable=True),
    sa.Column('submitted_by_id', sa.Integer(), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approved_by_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_version_id'], ['cycle_report_data_profiling_rule_versions.version_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['submitted_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workflow_activity_id'], ['workflow_activities.activity_id'], ),
    sa.PrimaryKeyConstraint('version_id')
    )
    op.create_table('cycle_report_document_access_logs',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('access_type', sa.String(length=20), nullable=False),
    sa.Column('accessed_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['cycle_report_documents.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_table('cycle_report_document_extractions',
    sa.Column('extraction_id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('attribute_name', sa.String(length=255), nullable=False),
    sa.Column('extracted_value', sa.Text(), nullable=True),
    sa.Column('confidence_score', sa.Integer(), nullable=True),
    sa.Column('extraction_method', sa.String(length=50), nullable=True),
    sa.Column('source_location', sa.Text(), nullable=True),
    sa.Column('supporting_context', sa.Text(), nullable=True),
    sa.Column('data_quality_flags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('alternative_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_validated', sa.Boolean(), nullable=False),
    sa.Column('validated_by_user_id', sa.Integer(), nullable=True),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('extracted_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('llm_provider', sa.String(length=50), nullable=True),
    sa.Column('llm_model', sa.String(length=100), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['cycle_report_documents.id'], ),
    sa.ForeignKeyConstraint(['validated_by_user_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('extraction_id')
    )
    op.create_table('cycle_report_document_revisions',
    sa.Column('revision_id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('test_case_id', sa.String(length=255), nullable=True),
    sa.Column('revision_number', sa.Integer(), nullable=False),
    sa.Column('revision_reason', sa.Text(), nullable=False),
    sa.Column('requested_by', sa.Integer(), nullable=False),
    sa.Column('requested_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('uploaded_by', sa.Integer(), nullable=True),
    sa.Column('uploaded_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('upload_notes', sa.Text(), nullable=True),
    sa.Column('previous_document_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('reviewed_by', sa.Integer(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('review_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['cycle_report_documents.id'], ),
    sa.ForeignKeyConstraint(['previous_document_id'], ['cycle_report_documents.id'], ),
    sa.ForeignKeyConstraint(['requested_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['uploaded_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('revision_id')
    )
    op.create_table('cycle_report_observation_mgmt_observation_records',
    sa.Column('observation_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('observation_title', sa.String(), nullable=False),
    sa.Column('observation_description', sa.Text(), nullable=False),
    sa.Column('observation_type', sa.Enum('DATA_QUALITY', 'PROCESS_CONTROL', 'REGULATORY_COMPLIANCE', 'SYSTEM_CONTROL', 'DOCUMENTATION', 'CALCULATION_ERROR', 'TIMING_ISSUE', 'ACCESS_CONTROL', name='observationtypeenum'), nullable=False),
    sa.Column('severity', sa.Enum('CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFORMATIONAL', name='observationseverityenum'), nullable=False),
    sa.Column('status', sa.Enum('DETECTED', 'SUBMITTED', 'UNDER_REVIEW', 'CONFIRMED', 'DISPUTED', 'APPROVED', 'REJECTED', 'IN_REMEDIATION', 'RESOLVED', 'CLOSED', name='observationstatusenum'), nullable=True),
    sa.Column('source_test_execution_id', sa.Integer(), nullable=True),
    sa.Column('source_sample_record_id', sa.String(), nullable=True),
    sa.Column('source_attribute_id', sa.Integer(), nullable=False),
    sa.Column('detection_method', sa.String(), nullable=True),
    sa.Column('detection_confidence', sa.Float(), nullable=True),
    sa.Column('impact_description', sa.Text(), nullable=True),
    sa.Column('impact_categories', sa.JSON(), nullable=True),
    sa.Column('financial_impact_estimate', sa.Float(), nullable=True),
    sa.Column('regulatory_risk_level', sa.String(), nullable=True),
    sa.Column('affected_processes', sa.JSON(), nullable=True),
    sa.Column('affected_systems', sa.JSON(), nullable=True),
    sa.Column('evidence_documents', sa.JSON(), nullable=True),
    sa.Column('supporting_data', sa.JSON(), nullable=True),
    sa.Column('screenshots', sa.JSON(), nullable=True),
    sa.Column('related_observations', sa.JSON(), nullable=True),
    sa.Column('detected_by', sa.Integer(), nullable=True),
    sa.Column('assigned_to', sa.Integer(), nullable=True),
    sa.Column('detected_at', sa.DateTime(), nullable=True),
    sa.Column('assigned_at', sa.DateTime(), nullable=True),
    sa.Column('auto_detection_rules', sa.JSON(), nullable=True),
    sa.Column('auto_detection_score', sa.Float(), nullable=True),
    sa.Column('manual_validation_required', sa.Boolean(), nullable=True),
    sa.Column('tester_decision', sa.String(), nullable=True),
    sa.Column('tester_comments', sa.Text(), nullable=True),
    sa.Column('tester_decision_by_id', sa.Integer(), nullable=True),
    sa.Column('tester_decision_at', sa.DateTime(), nullable=True),
    sa.Column('report_owner_decision', sa.String(), nullable=True),
    sa.Column('report_owner_comments', sa.Text(), nullable=True),
    sa.Column('report_owner_decision_by_id', sa.Integer(), nullable=True),
    sa.Column('report_owner_decision_at', sa.DateTime(), nullable=True),
    sa.Column('approval_status', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['detected_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_owner_decision_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['source_attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['source_test_execution_id'], ['cycle_report_test_execution_results.id'], ),
    sa.ForeignKeyConstraint(['tester_decision_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('observation_id')
    )
    op.create_table('cycle_report_observation_versions',
    sa.Column('version_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('workflow_activity_id', sa.Integer(), nullable=True),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_status', sa.Enum('DRAFT', 'PENDING_APPROVAL', 'APPROVED', 'REJECTED', 'SUPERSEDED', name='versionstatusenum'), nullable=False),
    sa.Column('parent_version_id', sa.UUID(), nullable=True),
    sa.Column('workflow_execution_id', sa.String(length=255), nullable=True),
    sa.Column('workflow_run_id', sa.String(length=255), nullable=True),
    sa.Column('activity_name', sa.String(length=100), nullable=True),
    sa.Column('total_observations', sa.Integer(), nullable=False),
    sa.Column('high_severity_count', sa.Integer(), nullable=False),
    sa.Column('medium_severity_count', sa.Integer(), nullable=False),
    sa.Column('low_severity_count', sa.Integer(), nullable=False),
    sa.Column('approved_count', sa.Integer(), nullable=False),
    sa.Column('rejected_count', sa.Integer(), nullable=False),
    sa.Column('pending_count', sa.Integer(), nullable=False),
    sa.Column('submission_notes', sa.Text(), nullable=True),
    sa.Column('submitted_by_id', sa.Integer(), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approval_notes', sa.Text(), nullable=True),
    sa.Column('approved_by_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('requested_changes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('report_owner_feedback', sa.Text(), nullable=True),
    sa.Column('report_owner_decision', sa.String(), nullable=True),
    sa.Column('report_owner_decision_by_id', sa.Integer(), nullable=True),
    sa.Column('report_owner_decision_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_version_id'], ['cycle_report_observation_versions.version_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_owner_decision_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['submitted_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workflow_activity_id'], ['workflow_activities.activity_id'], ),
    sa.PrimaryKeyConstraint('version_id')
    )
    op.create_table('cycle_report_planning_pde_mappings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.Integer(), nullable=True),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('pde_name', sa.String(length=255), nullable=False),
    sa.Column('pde_code', sa.String(length=100), nullable=False),
    sa.Column('pde_description', sa.Text(), nullable=True),
    sa.Column('mapping_type', sa.String(length=50), nullable=True),
    sa.Column('source_field', sa.String(length=255), nullable=True),
    sa.Column('transformation_rule', sa.JSON(), nullable=True),
    sa.Column('business_process', sa.String(length=255), nullable=True),
    sa.Column('business_owner', sa.String(length=255), nullable=True),
    sa.Column('data_steward', sa.String(length=255), nullable=True),
    sa.Column('llm_suggested_mapping', sa.JSON(), nullable=True),
    sa.Column('llm_confidence_score', sa.Integer(), nullable=True),
    sa.Column('llm_mapping_rationale', sa.Text(), nullable=True),
    sa.Column('llm_alternative_mappings', sa.JSON(), nullable=True),
    sa.Column('mapping_confirmed_by_user', sa.Boolean(), nullable=True),
    sa.Column('criticality', sa.String(length=50), nullable=True),
    sa.Column('risk_level', sa.String(length=50), nullable=True),
    sa.Column('regulatory_flag', sa.Boolean(), nullable=True),
    sa.Column('pii_flag', sa.Boolean(), nullable=True),
    sa.Column('llm_suggested_criticality', sa.String(length=50), nullable=True),
    sa.Column('llm_suggested_risk_level', sa.String(length=50), nullable=True),
    sa.Column('llm_classification_rationale', sa.Text(), nullable=True),
    sa.Column('llm_regulatory_references', sa.JSON(), nullable=True),
    sa.Column('information_security_classification', sa.String(length=50), nullable=True),
    sa.Column('is_validated', sa.Boolean(), nullable=True),
    sa.Column('validation_message', sa.Text(), nullable=True),
    sa.Column('profiling_criteria', sa.JSON(), nullable=True),
    sa.Column('latest_review_status', postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', 'NEEDS_REVISION', name='reviewstatus'), nullable=True),
    sa.Column('latest_review_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycle_report_planning_versions',
    sa.Column('version_id', sa.UUID(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('workflow_activity_id', sa.Integer(), nullable=True),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_status', postgresql.ENUM('DRAFT', 'PENDING_APPROVAL', 'APPROVED', 'REJECTED', 'SUPERSEDED', name='versionstatus'), nullable=False),
    sa.Column('parent_version_id', sa.UUID(), nullable=True),
    sa.Column('workflow_execution_id', sa.String(length=255), nullable=True),
    sa.Column('workflow_run_id', sa.String(length=255), nullable=True),
    sa.Column('total_attributes', sa.Integer(), nullable=False),
    sa.Column('approved_attributes', sa.Integer(), nullable=False),
    sa.Column('pk_attributes', sa.Integer(), nullable=False),
    sa.Column('cde_attributes', sa.Integer(), nullable=False),
    sa.Column('mandatory_attributes', sa.Integer(), nullable=False),
    sa.Column('total_data_sources', sa.Integer(), nullable=False),
    sa.Column('approved_data_sources', sa.Integer(), nullable=False),
    sa.Column('total_pde_mappings', sa.Integer(), nullable=False),
    sa.Column('approved_pde_mappings', sa.Integer(), nullable=False),
    sa.Column('llm_generation_summary', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('submitted_by_id', sa.Integer(), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approved_by_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_version_id'], ['cycle_report_planning_versions.version_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['submitted_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workflow_activity_id'], ['workflow_activities.activity_id'], ),
    sa.PrimaryKeyConstraint('version_id'),
    sa.UniqueConstraint('phase_id', 'version_number', name='uq_planning_version_phase_number')
    )
    op.create_table('cycle_report_sample_selection_versions',
    sa.Column('version_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('workflow_activity_id', sa.Integer(), nullable=True),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_status', postgresql.ENUM('draft', 'pending_approval', 'approved', 'rejected', 'superseded', name='sample_selection_version_status_enum'), nullable=False),
    sa.Column('parent_version_id', sa.UUID(), nullable=True),
    sa.Column('workflow_execution_id', sa.String(length=255), nullable=False),
    sa.Column('workflow_run_id', sa.String(length=255), nullable=False),
    sa.Column('activity_name', sa.String(length=100), nullable=False),
    sa.Column('selection_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('target_sample_size', sa.Integer(), nullable=False),
    sa.Column('actual_sample_size', sa.Integer(), nullable=False),
    sa.Column('intelligent_sampling_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('distribution_metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data_source_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('submission_notes', sa.Text(), nullable=True),
    sa.Column('submitted_by_id', sa.Integer(), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approval_notes', sa.Text(), nullable=True),
    sa.Column('approved_by_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('report_owner_decision', sa.String(length=20), nullable=True),
    sa.Column('report_owner_feedback', sa.Text(), nullable=True),
    sa.Column('report_owner_reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('report_owner_reviewed_by_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_version_id'], ['cycle_report_sample_selection_versions.version_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_owner_reviewed_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['submitted_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workflow_activity_id'], ['workflow_activities.activity_id'], ),
    sa.PrimaryKeyConstraint('version_id')
    )
    op.create_table('cycle_report_scoping_versions',
    sa.Column('version_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('workflow_activity_id', sa.Integer(), nullable=True),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('version_status', postgresql.ENUM('draft', 'pending_approval', 'approved', 'rejected', 'superseded', name='scoping_version_status_enum'), nullable=False),
    sa.Column('parent_version_id', sa.UUID(), nullable=True),
    sa.Column('workflow_execution_id', sa.String(length=255), nullable=True),
    sa.Column('workflow_run_id', sa.String(length=255), nullable=True),
    sa.Column('activity_name', sa.String(length=100), nullable=True),
    sa.Column('total_attributes', sa.Integer(), nullable=False),
    sa.Column('scoped_attributes', sa.Integer(), nullable=False),
    sa.Column('declined_attributes', sa.Integer(), nullable=False),
    sa.Column('override_count', sa.Integer(), nullable=False),
    sa.Column('cde_count', sa.Integer(), nullable=False),
    sa.Column('recommendation_accuracy', sa.Float(), nullable=True),
    sa.Column('submission_notes', sa.Text(), nullable=True),
    sa.Column('submitted_by_id', sa.Integer(), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approval_notes', sa.Text(), nullable=True),
    sa.Column('approved_by_id', sa.Integer(), nullable=True),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('requested_changes', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('resource_impact_assessment', sa.Text(), nullable=True),
    sa.Column('risk_coverage_assessment', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['parent_version_id'], ['cycle_report_scoping_versions.version_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['submitted_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['workflow_activity_id'], ['workflow_activities.activity_id'], ),
    sa.PrimaryKeyConstraint('version_id')
    )
    op.create_table('cycle_report_test_cases',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_case_number', sa.String(length=50), nullable=False),
    sa.Column('test_case_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('expected_outcome', sa.Text(), nullable=True),
    sa.Column('test_type', sa.String(length=50), nullable=True),
    sa.Column('query_text', sa.Text(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.Column('status', postgresql.ENUM('Not Started', 'In Progress', 'Submitted', 'Pending Approval', 'Complete', name='phase_status_enum'), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=True),
    sa.Column('sample_id', sa.String(length=255), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('attribute_name', sa.String(length=255), nullable=False),
    sa.Column('lob_id', sa.Integer(), nullable=False),
    sa.Column('data_owner_id', sa.Integer(), nullable=False),
    sa.Column('assigned_by', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('submission_deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('special_instructions', sa.Text(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['data_owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['lob_id'], ['lobs.lob_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycle_report_test_execution_audit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('execution_id', sa.Integer(), nullable=False),
    sa.Column('action', sa.String(length=100), nullable=False),
    sa.Column('action_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('performed_by', sa.Integer(), nullable=False),
    sa.Column('performed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('previous_status', sa.String(length=50), nullable=True),
    sa.Column('new_status', sa.String(length=50), nullable=True),
    sa.Column('change_reason', sa.Text(), nullable=True),
    sa.Column('system_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['execution_id'], ['cycle_report_test_execution_results.id'], ),
    sa.ForeignKeyConstraint(['performed_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_test_execution_audit_execution_id', 'cycle_report_test_execution_audit', ['execution_id'], unique=False)
    op.create_index('idx_test_execution_audit_performed_at', 'cycle_report_test_execution_audit', ['performed_at'], unique=False)
    op.create_index('idx_test_execution_audit_performed_by', 'cycle_report_test_execution_audit', ['performed_by'], unique=False)
    op.create_table('cycle_report_test_execution_reviews',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('execution_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('review_status', sa.String(length=50), nullable=False),
    sa.Column('review_notes', sa.Text(), nullable=True),
    sa.Column('reviewer_comments', sa.Text(), nullable=True),
    sa.Column('recommended_action', sa.String(length=100), nullable=True),
    sa.Column('accuracy_score', sa.Float(), nullable=True),
    sa.Column('completeness_score', sa.Float(), nullable=True),
    sa.Column('consistency_score', sa.Float(), nullable=True),
    sa.Column('overall_score', sa.Float(), nullable=True),
    sa.Column('review_criteria_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('requires_retest', sa.Boolean(), nullable=True),
    sa.Column('retest_reason', sa.Text(), nullable=True),
    sa.Column('escalation_required', sa.Boolean(), nullable=True),
    sa.Column('escalation_reason', sa.Text(), nullable=True),
    sa.Column('reviewed_by', sa.Integer(), nullable=False),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['execution_id'], ['cycle_report_test_execution_results.id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('execution_id', 'reviewed_by', name='uq_test_execution_reviews_execution_reviewer')
    )
    op.create_index('idx_test_execution_reviews_execution_id', 'cycle_report_test_execution_reviews', ['execution_id'], unique=False)
    op.create_index('idx_test_execution_reviews_phase_id', 'cycle_report_test_execution_reviews', ['phase_id'], unique=False)
    op.create_index('idx_test_execution_reviews_reviewed_by', 'cycle_report_test_execution_reviews', ['reviewed_by'], unique=False)
    op.create_index('idx_test_execution_reviews_status', 'cycle_report_test_execution_reviews', ['review_status'], unique=False)
    op.create_table('data_owner_assignments',
    sa.Column('assignment_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('lob_id', sa.Integer(), nullable=True),
    sa.Column('cdo_id', sa.Integer(), nullable=True),
    sa.Column('data_owner_id', sa.Integer(), nullable=True),
    sa.Column('assigned_by', sa.Integer(), nullable=False),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', postgresql.ENUM('Assigned', 'In Progress', 'Completed', 'Overdue', name='assignment_status_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['assigned_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['cdo_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['data_owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['lob_id'], ['lobs.lob_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('assignment_id')
    )
    op.create_index(op.f('ix_data_owner_assignments_assignment_id'), 'data_owner_assignments', ['assignment_id'], unique=False)
    op.create_table('workflow_activity_history',
    sa.Column('history_id', sa.Integer(), nullable=False),
    sa.Column('activity_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_name', sa.String(length=100), nullable=False),
    sa.Column('activity_name', sa.String(length=255), nullable=False),
    sa.Column('from_status', sa.String(length=50), nullable=True),
    sa.Column('to_status', sa.String(length=50), nullable=False),
    sa.Column('changed_by', sa.Integer(), nullable=False),
    sa.Column('changed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('change_reason', sa.Text(), nullable=True),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['activity_id'], ['workflow_activities.activity_id'], ),
    sa.ForeignKeyConstraint(['changed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('history_id')
    )
    op.create_index('ix_workflow_activity_history_activity', 'workflow_activity_history', ['activity_id'], unique=False)
    op.create_index('ix_workflow_activity_history_changed_at', 'workflow_activity_history', ['changed_at'], unique=False)
    op.create_index(op.f('ix_workflow_activity_history_history_id'), 'workflow_activity_history', ['history_id'], unique=False)
    op.create_table('workflow_transitions',
    sa.Column('transition_id', sa.String(length=36), nullable=False),
    sa.Column('execution_id', sa.String(length=36), nullable=False),
    sa.Column('from_step_id', sa.String(length=36), nullable=True),
    sa.Column('to_step_id', sa.String(length=36), nullable=True),
    sa.Column('transition_type', sa.String(length=50), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.Column('condition_evaluated', sa.String(length=200), nullable=True),
    sa.Column('condition_result', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['execution_id'], ['workflow_executions.execution_id'], ),
    sa.ForeignKeyConstraint(['from_step_id'], ['workflow_steps.step_id'], ),
    sa.ForeignKeyConstraint(['to_step_id'], ['workflow_steps.step_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('transition_id')
    )
    op.create_index('idx_workflow_transitions_execution', 'workflow_transitions', ['execution_id'], unique=False)
    op.create_index('idx_workflow_transitions_timing', 'workflow_transitions', ['started_at', 'completed_at'], unique=False)
    op.create_table('cycle_report_data_profiling_jobs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('configuration_id', sa.Integer(), nullable=False),
    sa.Column('job_id', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('duration_seconds', sa.Integer(), nullable=True),
    sa.Column('total_records', sa.BigInteger(), nullable=True),
    sa.Column('records_processed', sa.BigInteger(), nullable=True),
    sa.Column('records_failed', sa.BigInteger(), nullable=True),
    sa.Column('processing_rate', sa.Float(), nullable=True),
    sa.Column('memory_peak_mb', sa.Integer(), nullable=True),
    sa.Column('cpu_peak_percent', sa.Float(), nullable=True),
    sa.Column('anomalies_detected', sa.Integer(), nullable=True),
    sa.Column('data_quality_score', sa.Float(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['configuration_id'], ['cycle_report_data_profiling_configurations.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('job_id')
    )
    op.create_table('cycle_report_data_profiling_rules',
    sa.Column('rule_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('version_id', sa.UUID(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('attribute_name', sa.String(length=255), nullable=False),
    sa.Column('rule_name', sa.String(length=255), nullable=False),
    sa.Column('rule_type', postgresql.ENUM('completeness', 'validity', 'accuracy', 'consistency', 'uniqueness', 'format', name='rule_type_enum'), nullable=False),
    sa.Column('rule_description', sa.Text(), nullable=True),
    sa.Column('rule_code', sa.Text(), nullable=False),
    sa.Column('rule_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('llm_provider', sa.String(length=50), nullable=True),
    sa.Column('llm_rationale', sa.Text(), nullable=True),
    sa.Column('llm_confidence_score', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('regulatory_reference', sa.Text(), nullable=True),
    sa.Column('is_executable', sa.Boolean(), server_default='true', nullable=False),
    sa.Column('execution_order', sa.Integer(), server_default='0', nullable=False),
    sa.Column('severity', postgresql.ENUM('low', 'medium', 'high', 'critical', name='severity_enum'), server_default='medium', nullable=False),
    sa.Column('tester_decision', postgresql.ENUM('approved', 'rejected', 'request_changes', name='decision_enum'), nullable=True),
    sa.Column('tester_decided_by', sa.Integer(), nullable=True),
    sa.Column('tester_decided_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('tester_notes', sa.Text(), nullable=True),
    sa.Column('report_owner_decision', postgresql.ENUM('approved', 'rejected', 'request_changes', name='decision_enum'), nullable=True),
    sa.Column('report_owner_decided_by', sa.Integer(), nullable=True),
    sa.Column('report_owner_decided_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('report_owner_notes', sa.Text(), nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'submitted', 'approved', 'rejected', name='rule_status_enum'), server_default='pending', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_owner_decided_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['tester_decided_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['version_id'], ['cycle_report_data_profiling_rule_versions.version_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rule_id')
    )
    op.create_table('cycle_report_observation_mgmt_impact_assessments',
    sa.Column('assessment_id', sa.Integer(), nullable=False),
    sa.Column('observation_id', sa.Integer(), nullable=False),
    sa.Column('impact_category', sa.Enum('FINANCIAL', 'REGULATORY', 'OPERATIONAL', 'REPUTATIONAL', 'STRATEGIC', 'CUSTOMER', name='impactcategoryenum'), nullable=False),
    sa.Column('impact_severity', sa.String(), nullable=False),
    sa.Column('impact_likelihood', sa.String(), nullable=False),
    sa.Column('impact_score', sa.Float(), nullable=False),
    sa.Column('financial_impact_min', sa.Float(), nullable=True),
    sa.Column('financial_impact_max', sa.Float(), nullable=True),
    sa.Column('financial_impact_currency', sa.String(), nullable=True),
    sa.Column('regulatory_requirements_affected', sa.JSON(), nullable=True),
    sa.Column('regulatory_deadlines', sa.JSON(), nullable=True),
    sa.Column('potential_penalties', sa.Float(), nullable=True),
    sa.Column('process_disruption_level', sa.String(), nullable=True),
    sa.Column('system_availability_impact', sa.String(), nullable=True),
    sa.Column('resource_requirements', sa.JSON(), nullable=True),
    sa.Column('resolution_time_estimate', sa.Integer(), nullable=True),
    sa.Column('business_disruption_duration', sa.Integer(), nullable=True),
    sa.Column('assessment_method', sa.String(), nullable=True),
    sa.Column('assessment_confidence', sa.Float(), nullable=True),
    sa.Column('assessment_rationale', sa.Text(), nullable=True),
    sa.Column('assessment_assumptions', sa.JSON(), nullable=True),
    sa.Column('assessed_by', sa.Integer(), nullable=True),
    sa.Column('assessed_at', sa.DateTime(), nullable=True),
    sa.Column('reviewed_by', sa.Integer(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['assessed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['observation_id'], ['cycle_report_observation_mgmt_observation_records.observation_id'], ),
    sa.ForeignKeyConstraint(['reviewed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('assessment_id')
    )
    op.create_table('cycle_report_observation_mgmt_resolutions',
    sa.Column('resolution_id', sa.Integer(), nullable=False),
    sa.Column('observation_id', sa.Integer(), nullable=False),
    sa.Column('resolution_strategy', sa.String(), nullable=False),
    sa.Column('resolution_description', sa.Text(), nullable=True),
    sa.Column('resolution_steps', sa.JSON(), nullable=True),
    sa.Column('success_criteria', sa.JSON(), nullable=True),
    sa.Column('validation_requirements', sa.JSON(), nullable=True),
    sa.Column('resolution_status', sa.Enum('NOT_STARTED', 'IN_PROGRESS', 'PENDING_VALIDATION', 'COMPLETED', 'FAILED', 'CANCELLED', name='resolutionstatusenum'), nullable=True),
    sa.Column('progress_percentage', sa.Float(), nullable=True),
    sa.Column('current_step', sa.String(), nullable=True),
    sa.Column('planned_start_date', sa.DateTime(), nullable=True),
    sa.Column('planned_completion_date', sa.DateTime(), nullable=True),
    sa.Column('actual_start_date', sa.DateTime(), nullable=True),
    sa.Column('actual_completion_date', sa.DateTime(), nullable=True),
    sa.Column('assigned_resources', sa.JSON(), nullable=True),
    sa.Column('estimated_effort_hours', sa.Integer(), nullable=True),
    sa.Column('actual_effort_hours', sa.Integer(), nullable=True),
    sa.Column('budget_allocated', sa.Float(), nullable=True),
    sa.Column('budget_spent', sa.Float(), nullable=True),
    sa.Column('implemented_controls', sa.JSON(), nullable=True),
    sa.Column('process_changes', sa.JSON(), nullable=True),
    sa.Column('system_changes', sa.JSON(), nullable=True),
    sa.Column('documentation_updates', sa.JSON(), nullable=True),
    sa.Column('training_requirements', sa.JSON(), nullable=True),
    sa.Column('validation_tests_planned', sa.JSON(), nullable=True),
    sa.Column('validation_tests_completed', sa.JSON(), nullable=True),
    sa.Column('validation_results', sa.JSON(), nullable=True),
    sa.Column('effectiveness_metrics', sa.JSON(), nullable=True),
    sa.Column('resolution_owner', sa.Integer(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('validated_by', sa.Integer(), nullable=True),
    sa.Column('validated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['observation_id'], ['cycle_report_observation_mgmt_observation_records.observation_id'], ),
    sa.ForeignKeyConstraint(['resolution_owner'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['validated_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('resolution_id')
    )
    op.create_table('cycle_report_observation_version_items',
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('version_id', sa.UUID(), nullable=False),
    sa.Column('observation_id', sa.Integer(), nullable=False),
    sa.Column('included_in_version', sa.Boolean(), nullable=False),
    sa.Column('version_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['observation_id'], ['cycle_report_observation_mgmt_observation_records.observation_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['version_id'], ['cycle_report_observation_versions.version_id'], ),
    sa.PrimaryKeyConstraint('item_id')
    )
    op.create_table('cycle_report_planning_pde_mapping_reviews',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pde_mapping_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('review_status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'NEEDS_REVISION', name='reviewstatus'), nullable=False),
    sa.Column('submitted_by_id', sa.Integer(), nullable=False),
    sa.Column('submitted_at', sa.DateTime(), nullable=False),
    sa.Column('reviewed_by_id', sa.Integer(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(), nullable=True),
    sa.Column('review_notes', sa.Text(), nullable=True),
    sa.Column('revision_requested', sa.Text(), nullable=True),
    sa.Column('llm_confidence_threshold', sa.Integer(), nullable=True),
    sa.Column('auto_approved', sa.Boolean(), nullable=True),
    sa.Column('version_number', sa.Integer(), nullable=True),
    sa.Column('is_latest', sa.Boolean(), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pde_mapping_id'], ['cycle_report_planning_pde_mappings.id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['reviewed_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['submitted_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycle_report_request_info_evidence',
    sa.Column('evidence_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('version_id', sa.UUID(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('test_case_id', sa.Integer(), nullable=False),
    sa.Column('sample_id', sa.String(length=255), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('attribute_name', sa.String(length=255), nullable=False),
    sa.Column('evidence_type', sa.String(length=20), nullable=False),
    sa.Column('evidence_status', postgresql.ENUM('pending', 'approved', 'rejected', 'request_changes', name='evidence_status_enum'), server_default='pending', nullable=False),
    sa.Column('data_owner_id', sa.Integer(), nullable=False),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('submission_notes', sa.Text(), nullable=True),
    sa.Column('original_filename', sa.String(length=255), nullable=True),
    sa.Column('stored_filename', sa.String(length=255), nullable=True),
    sa.Column('file_path', sa.String(length=500), nullable=True),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('file_hash', sa.String(length=64), nullable=True),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('data_source_id', sa.Integer(), nullable=True),
    sa.Column('query_text', sa.Text(), nullable=True),
    sa.Column('query_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('query_result_sample', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('row_count', sa.Integer(), nullable=True),
    sa.Column('tester_decision', postgresql.ENUM('approved', 'rejected', 'request_changes', name='decision_enum'), nullable=True),
    sa.Column('tester_notes', sa.Text(), nullable=True),
    sa.Column('tester_decided_by', sa.Integer(), nullable=True),
    sa.Column('tester_decided_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('report_owner_decision', postgresql.ENUM('approved', 'rejected', 'request_changes', name='decision_enum'), nullable=True),
    sa.Column('report_owner_notes', sa.Text(), nullable=True),
    sa.Column('report_owner_decided_by', sa.Integer(), nullable=True),
    sa.Column('report_owner_decided_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('requires_resubmission', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('resubmission_deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('resubmission_count', sa.Integer(), server_default='0', nullable=False),
    sa.Column('parent_evidence_id', sa.UUID(), nullable=True),
    sa.Column('validation_status', sa.String(length=50), server_default='pending', nullable=True),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('validated_by', sa.Integer(), nullable=True),
    sa.Column('validated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.CheckConstraint("(evidence_type = 'document' AND original_filename IS NOT NULL AND file_path IS NOT NULL) OR (evidence_type = 'data_source' AND query_text IS NOT NULL)", name='check_evidence_type_fields_versioned'),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['data_owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['data_source_id'], ['cycle_report_planning_data_sources.id'], ),
    sa.ForeignKeyConstraint(['parent_evidence_id'], ['cycle_report_request_info_evidence.evidence_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_owner_decided_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['test_case_id'], ['cycle_report_test_cases.id'], ),
    sa.ForeignKeyConstraint(['tester_decided_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['validated_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['version_id'], ['cycle_report_request_info_evidence_versions.version_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('evidence_id')
    )
    op.create_index(op.f('ix_cycle_report_request_info_evidence_data_owner_id'), 'cycle_report_request_info_evidence', ['data_owner_id'], unique=False)
    op.create_index(op.f('ix_cycle_report_request_info_evidence_sample_id'), 'cycle_report_request_info_evidence', ['sample_id'], unique=False)
    op.create_index(op.f('ix_cycle_report_request_info_evidence_test_case_id'), 'cycle_report_request_info_evidence', ['test_case_id'], unique=False)
    op.create_index(op.f('ix_cycle_report_request_info_evidence_version_id'), 'cycle_report_request_info_evidence', ['version_id'], unique=False)
    op.create_table('cycle_report_rfi_query_validations',
    sa.Column('validation_id', sa.UUID(), nullable=False),
    sa.Column('test_case_id', sa.Integer(), nullable=False),
    sa.Column('data_source_id', sa.UUID(), nullable=False),
    sa.Column('query_text', sa.Text(), nullable=False),
    sa.Column('query_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('validation_status', sa.String(length=50), nullable=False),
    sa.Column('validation_timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('row_count', sa.Integer(), nullable=True),
    sa.Column('column_names', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('sample_rows', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('has_primary_keys', sa.Boolean(), nullable=True),
    sa.Column('has_target_attribute', sa.Boolean(), nullable=True),
    sa.Column('missing_columns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('validation_warnings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('validated_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['data_source_id'], ['cycle_report_rfi_data_sources.data_source_id'], ),
    sa.ForeignKeyConstraint(['test_case_id'], ['cycle_report_test_cases.id'], ),
    sa.ForeignKeyConstraint(['validated_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('validation_id')
    )
    op.create_index(op.f('ix_cycle_report_rfi_query_validations_validation_id'), 'cycle_report_rfi_query_validations', ['validation_id'], unique=False)
    op.create_table('cycle_report_sample_selection_samples',
    sa.Column('sample_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('version_id', sa.UUID(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('lob_id', sa.Integer(), nullable=True),
    sa.Column('sample_identifier', sa.String(length=255), nullable=False),
    sa.Column('sample_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('sample_category', postgresql.ENUM('clean', 'anomaly', 'boundary', name='sample_category_enum'), nullable=False),
    sa.Column('sample_source', postgresql.ENUM('tester', 'llm', 'manual', 'carried_forward', name='sample_source_enum'), nullable=False),
    sa.Column('tester_decision', postgresql.ENUM('approved', 'rejected', 'pending', name='sample_decision_enum'), nullable=False),
    sa.Column('tester_decision_notes', sa.Text(), nullable=True),
    sa.Column('tester_decision_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('tester_decision_by_id', sa.Integer(), nullable=True),
    sa.Column('report_owner_decision', postgresql.ENUM('approved', 'rejected', 'pending', name='sample_decision_enum'), nullable=False),
    sa.Column('report_owner_decision_notes', sa.Text(), nullable=True),
    sa.Column('report_owner_decision_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('report_owner_decision_by_id', sa.Integer(), nullable=True),
    sa.Column('risk_score', sa.Float(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('generation_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('validation_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('carried_from_version_id', sa.UUID(), nullable=True),
    sa.Column('carried_from_sample_id', sa.UUID(), nullable=True),
    sa.Column('carry_forward_reason', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['carried_from_sample_id'], ['cycle_report_sample_selection_samples.sample_id'], ),
    sa.ForeignKeyConstraint(['carried_from_version_id'], ['cycle_report_sample_selection_versions.version_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['lob_id'], ['lobs.lob_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_owner_decision_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['tester_decision_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['version_id'], ['cycle_report_sample_selection_versions.version_id'], ),
    sa.PrimaryKeyConstraint('sample_id')
    )
    op.create_table('cycle_report_scoping_attributes',
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('version_id', sa.UUID(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('planning_attribute_id', sa.Integer(), nullable=False),
    sa.Column('llm_recommendation', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('llm_provider', sa.String(length=50), nullable=True),
    sa.Column('llm_confidence_score', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('llm_rationale', sa.Text(), nullable=True),
    sa.Column('llm_processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('llm_request_payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('llm_response_payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tester_decision', postgresql.ENUM('accept', 'decline', 'override', name='scoping_tester_decision_enum'), nullable=True),
    sa.Column('final_scoping', sa.Boolean(), nullable=True),
    sa.Column('tester_rationale', sa.Text(), nullable=True),
    sa.Column('tester_decided_by_id', sa.Integer(), nullable=True),
    sa.Column('tester_decided_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('report_owner_decision', postgresql.ENUM('approved', 'rejected', 'pending', 'needs_revision', name='scoping_report_owner_decision_enum'), nullable=True),
    sa.Column('report_owner_notes', sa.Text(), nullable=True),
    sa.Column('report_owner_decided_by_id', sa.Integer(), nullable=True),
    sa.Column('report_owner_decided_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_override', sa.Boolean(), nullable=False),
    sa.Column('override_reason', sa.Text(), nullable=True),
    sa.Column('is_cde', sa.Boolean(), nullable=False),
    sa.Column('has_historical_issues', sa.Boolean(), nullable=False),
    sa.Column('is_primary_key', sa.Boolean(), nullable=False),
    sa.Column('data_quality_score', sa.Float(), nullable=True),
    sa.Column('data_quality_issues', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('expected_source_documents', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('search_keywords', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('risk_factors', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'submitted', 'approved', 'rejected', 'needs_revision', name='scoping_attribute_status_enum'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['planning_attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['report_owner_decided_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['tester_decided_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['version_id'], ['cycle_report_scoping_versions.version_id'], ),
    sa.PrimaryKeyConstraint('attribute_id')
    )
    op.create_table('data_owner_sla_violations',
    sa.Column('violation_id', sa.Integer(), nullable=False),
    sa.Column('assignment_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('cdo_id', sa.Integer(), nullable=False),
    sa.Column('violation_detected_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('original_deadline', sa.DateTime(timezone=True), nullable=False),
    sa.Column('hours_overdue', sa.Float(), nullable=False),
    sa.Column('escalation_level', postgresql.ENUM('None', 'Level 1', 'Level 2', 'Level 3', name='escalation_level_enum'), nullable=False),
    sa.Column('last_escalation_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=False),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['assignment_id'], ['data_owner_assignments.assignment_id'], ),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['cdo_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('violation_id')
    )
    op.create_index(op.f('ix_data_owner_sla_violations_violation_id'), 'data_owner_sla_violations', ['violation_id'], unique=False)
    op.create_table('observation_management_audit_logs',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('observation_id', sa.Integer(), nullable=True),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('entity_type', sa.String(), nullable=False),
    sa.Column('entity_id', sa.String(), nullable=True),
    sa.Column('old_values', sa.JSON(), nullable=True),
    sa.Column('new_values', sa.JSON(), nullable=True),
    sa.Column('changes_summary', sa.Text(), nullable=True),
    sa.Column('performed_by', sa.Integer(), nullable=False),
    sa.Column('performed_at', sa.DateTime(), nullable=True),
    sa.Column('user_role', sa.String(), nullable=True),
    sa.Column('ip_address', sa.String(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('session_id', sa.String(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('business_justification', sa.Text(), nullable=True),
    sa.Column('source_test_execution_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['observation_id'], ['cycle_report_observation_mgmt_observation_records.observation_id'], ),
    sa.ForeignKeyConstraint(['performed_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['source_test_execution_id'], ['cycle_report_test_execution_results.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('log_id')
    )
    op.create_table('cycle_report_data_owner_lob_mapping',
    sa.Column('mapping_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('version_id', sa.UUID(), nullable=True),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('sample_id', sa.UUID(), nullable=True),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('lob_id', sa.Integer(), nullable=False),
    sa.Column('data_owner_id', sa.Integer(), nullable=True),
    sa.Column('data_executive_id', sa.Integer(), nullable=True),
    sa.Column('assigned_by_data_executive_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('assignment_rationale', sa.Text(), nullable=True),
    sa.Column('previous_data_owner_id', sa.Integer(), nullable=True),
    sa.Column('change_reason', sa.Text(), nullable=True),
    sa.Column('assignment_status', sa.String(length=50), server_default='unassigned', nullable=False),
    sa.Column('data_owner_acknowledged', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('data_owner_acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('data_owner_response_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.CheckConstraint("assignment_status IN ('assigned', 'unassigned', 'changed', 'confirmed')", name='ck_data_owner_assignment_status'),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['data_executive_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['data_owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['lob_id'], ['lobs.lob_id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['previous_data_owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['sample_id'], ['cycle_report_sample_selection_samples.sample_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['version_id'], ['cycle_report_data_owner_lob_mapping_versions.version_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('mapping_id'),
    sa.UniqueConstraint('version_id', 'phase_id', 'sample_id', 'attribute_id', 'lob_id', name='uq_data_owner_assignment_version_phase_sample_attr_lob')
    )
    op.create_table('cycle_report_data_profiling_attribute_results',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('profiling_job_id', sa.Integer(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=False),
    sa.Column('attribute_name', sa.String(length=255), nullable=False),
    sa.Column('total_values', sa.BigInteger(), nullable=False),
    sa.Column('null_count', sa.BigInteger(), nullable=True),
    sa.Column('null_percentage', sa.Float(), nullable=True),
    sa.Column('distinct_count', sa.BigInteger(), nullable=True),
    sa.Column('distinct_percentage', sa.Float(), nullable=True),
    sa.Column('detected_data_type', sa.String(length=100), nullable=True),
    sa.Column('type_consistency', sa.Float(), nullable=True),
    sa.Column('min_value', sa.Float(), nullable=True),
    sa.Column('max_value', sa.Float(), nullable=True),
    sa.Column('mean_value', sa.Float(), nullable=True),
    sa.Column('median_value', sa.Float(), nullable=True),
    sa.Column('std_deviation', sa.Float(), nullable=True),
    sa.Column('percentile_25', sa.Float(), nullable=True),
    sa.Column('percentile_75', sa.Float(), nullable=True),
    sa.Column('min_length', sa.Integer(), nullable=True),
    sa.Column('max_length', sa.Integer(), nullable=True),
    sa.Column('avg_length', sa.Float(), nullable=True),
    sa.Column('common_patterns', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('pattern_coverage', sa.Float(), nullable=True),
    sa.Column('top_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('value_distribution', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('completeness_score', sa.Float(), nullable=False),
    sa.Column('validity_score', sa.Float(), nullable=False),
    sa.Column('consistency_score', sa.Float(), nullable=False),
    sa.Column('uniqueness_score', sa.Float(), nullable=False),
    sa.Column('overall_quality_score', sa.Float(), nullable=False),
    sa.Column('anomaly_count', sa.Integer(), nullable=True),
    sa.Column('anomaly_examples', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('anomaly_rules_triggered', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('outliers_detected', sa.Integer(), nullable=True),
    sa.Column('outlier_examples', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('profiling_duration_ms', sa.Integer(), nullable=True),
    sa.Column('sampling_applied', sa.Boolean(), nullable=True),
    sa.Column('sample_size_used', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['attribute_id'], ['cycle_report_planning_attributes.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['profiling_job_id'], ['cycle_report_data_profiling_jobs.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycle_report_data_profiling_results',
    sa.Column('result_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('rule_id', sa.UUID(), nullable=False),
    sa.Column('attribute_id', sa.Integer(), nullable=True),
    sa.Column('execution_status', sa.String(length=50), nullable=False),
    sa.Column('execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('executed_at', sa.DateTime(), nullable=False),
    sa.Column('passed_count', sa.Integer(), nullable=True),
    sa.Column('failed_count', sa.Integer(), nullable=True),
    sa.Column('total_count', sa.Integer(), nullable=True),
    sa.Column('pass_rate', sa.Float(), nullable=True),
    sa.Column('result_summary', sa.JSON(), nullable=True),
    sa.Column('failed_records', sa.JSON(), nullable=True),
    sa.Column('result_details', sa.Text(), nullable=True),
    sa.Column('quality_impact', sa.Float(), nullable=True),
    sa.Column('severity', sa.String(length=50), nullable=True),
    sa.Column('has_anomaly', sa.Boolean(), nullable=True),
    sa.Column('anomaly_description', sa.Text(), nullable=True),
    sa.Column('anomaly_marked_by', sa.Integer(), nullable=True),
    sa.Column('anomaly_marked_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['anomaly_marked_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['rule_id'], ['cycle_report_data_profiling_rules.rule_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('result_id')
    )
    op.create_index(op.f('ix_cycle_report_data_profiling_results_result_id'), 'cycle_report_data_profiling_results', ['result_id'], unique=False)
    op.create_table('cycle_report_planning_pde_mapping_review_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pde_mapping_id', sa.Integer(), nullable=False),
    sa.Column('review_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('action_type', sa.Enum('SUBMIT_FOR_REVIEW', 'APPROVE', 'REJECT', 'REQUEST_REVISION', 'REVISE', 'AUTO_APPROVE', name='reviewactiontype'), nullable=False),
    sa.Column('action_by_id', sa.Integer(), nullable=False),
    sa.Column('action_at', sa.DateTime(), nullable=False),
    sa.Column('previous_status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'NEEDS_REVISION', name='reviewstatus'), nullable=True),
    sa.Column('new_status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'NEEDS_REVISION', name='reviewstatus'), nullable=True),
    sa.Column('action_notes', sa.Text(), nullable=True),
    sa.Column('changes_made', sa.JSON(), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.ForeignKeyConstraint(['action_by_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pde_mapping_id'], ['cycle_report_planning_pde_mappings.id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['review_id'], ['cycle_report_planning_pde_mapping_reviews.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycle_report_request_info_testcase_source_evidence',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('test_case_id', sa.Integer(), nullable=False),
    sa.Column('sample_id', sa.String(length=255), nullable=False),
    sa.Column('evidence_type', postgresql.ENUM('document', 'data_source', name='evidence_type_enum'), nullable=False),
    sa.Column('document_name', sa.String(length=255), nullable=True),
    sa.Column('document_path', sa.String(length=500), nullable=True),
    sa.Column('document_size', sa.Integer(), nullable=True),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('document_hash', sa.String(length=128), nullable=True),
    sa.Column('data_source_id', sa.Integer(), nullable=True),
    sa.Column('query_text', sa.Text(), nullable=True),
    sa.Column('query_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('query_result_sample', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('query_validation_id', sa.UUID(), nullable=True),
    sa.Column('submitted_by', sa.Integer(), nullable=False),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('submission_notes', sa.Text(), nullable=True),
    sa.Column('validation_status', postgresql.ENUM('pending', 'valid', 'invalid', 'requires_review', name='evidence_validation_status_enum'), nullable=False),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('validated_by', sa.Integer(), nullable=True),
    sa.Column('validated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('is_current', sa.Boolean(), nullable=False),
    sa.Column('replaced_by', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.CheckConstraint("(evidence_type = 'document' AND document_name IS NOT NULL) OR (evidence_type = 'data_source' AND data_source_id IS NOT NULL AND query_text IS NOT NULL)", name='check_evidence_type_constraints'),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['data_source_id'], ['cycle_report_planning_data_sources.id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['query_validation_id'], ['cycle_report_rfi_query_validations.validation_id'], ),
    sa.ForeignKeyConstraint(['replaced_by'], ['cycle_report_request_info_testcase_source_evidence.id'], ),
    sa.ForeignKeyConstraint(['submitted_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['test_case_id'], ['cycle_report_test_cases.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['validated_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('test_case_id', 'version_number', name='uq_evidence_test_case_version')
    )
    op.create_table('cycle_report_test_cases_evidence',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_case_id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('cycle_id', sa.Integer(), nullable=False),
    sa.Column('report_id', sa.Integer(), nullable=False),
    sa.Column('sample_id', sa.String(length=255), nullable=False),
    sa.Column('evidence_type', sa.String(length=20), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('is_current', sa.Boolean(), nullable=False),
    sa.Column('parent_evidence_id', sa.Integer(), nullable=True),
    sa.Column('data_owner_id', sa.Integer(), nullable=False),
    sa.Column('submitted_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('submission_notes', sa.Text(), nullable=True),
    sa.Column('submission_number', sa.Integer(), nullable=False),
    sa.Column('is_revision', sa.Boolean(), nullable=False),
    sa.Column('revision_requested_by', sa.Integer(), nullable=True),
    sa.Column('revision_requested_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('revision_reason', sa.Text(), nullable=True),
    sa.Column('revision_deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('validation_status', sa.String(length=50), nullable=False),
    sa.Column('validation_notes', sa.Text(), nullable=True),
    sa.Column('validated_by', sa.Integer(), nullable=True),
    sa.Column('validated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('tester_decision', sa.String(length=50), nullable=True),
    sa.Column('tester_notes', sa.Text(), nullable=True),
    sa.Column('decided_by', sa.Integer(), nullable=True),
    sa.Column('decided_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('requires_resubmission', sa.Boolean(), nullable=False),
    sa.Column('resubmission_deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('original_filename', sa.String(length=255), nullable=True),
    sa.Column('stored_filename', sa.String(length=255), nullable=True),
    sa.Column('file_path', sa.String(length=500), nullable=True),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('file_hash', sa.String(length=64), nullable=True),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('document_type', postgresql.ENUM('Source Document', 'Supporting Evidence', 'Data Extract', 'Query Result', 'Other', name='document_type_enum'), nullable=True),
    sa.Column('rfi_data_source_id', sa.UUID(), nullable=True),
    sa.Column('planning_data_source_id', sa.Integer(), nullable=True),
    sa.Column('query_text', sa.Text(), nullable=True),
    sa.Column('query_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('query_validation_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('created_by_id', sa.Integer(), nullable=True, comment='ID of user who created this record'),
    sa.Column('updated_by_id', sa.Integer(), nullable=True, comment='ID of user who last updated this record'),
    sa.CheckConstraint("(evidence_type = 'document' AND original_filename IS NOT NULL AND file_path IS NOT NULL) OR (evidence_type = 'data_source' AND query_text IS NOT NULL)", name='check_evidence_type_fields'),
    sa.ForeignKeyConstraint(['created_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['cycle_id'], ['test_cycles.cycle_id'], ),
    sa.ForeignKeyConstraint(['data_owner_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['decided_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['parent_evidence_id'], ['cycle_report_test_cases_evidence.id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['planning_data_source_id'], ['cycle_report_planning_data_sources.id'], ),
    sa.ForeignKeyConstraint(['query_validation_id'], ['cycle_report_rfi_query_validations.validation_id'], ),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], ),
    sa.ForeignKeyConstraint(['revision_requested_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['rfi_data_source_id'], ['cycle_report_rfi_data_sources.data_source_id'], ),
    sa.ForeignKeyConstraint(['test_case_id'], ['cycle_report_test_cases.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['validated_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('test_case_id', 'version_number', name='uq_test_case_version')
    )
    op.create_table('cycle_report_request_info_evidence_validation',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('evidence_id', sa.Integer(), nullable=False),
    sa.Column('validation_rule', sa.String(length=255), nullable=False),
    sa.Column('validation_result', postgresql.ENUM('passed', 'failed', 'warning', name='validation_result_enum'), nullable=False),
    sa.Column('validation_message', sa.Text(), nullable=True),
    sa.Column('validated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('validated_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['evidence_id'], ['cycle_report_request_info_testcase_source_evidence.id'], ),
    sa.ForeignKeyConstraint(['validated_by'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('cycle_report_request_info_tester_decisions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phase_id', sa.Integer(), nullable=False),
    sa.Column('evidence_id', sa.Integer(), nullable=False),
    sa.Column('test_case_id', sa.Integer(), nullable=False),
    sa.Column('decision', postgresql.ENUM('approved', 'rejected', 'requires_revision', name='tester_decision_enum'), nullable=False),
    sa.Column('decision_notes', sa.Text(), nullable=True),
    sa.Column('decision_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('decided_by', sa.Integer(), nullable=False),
    sa.Column('requires_resubmission', sa.Boolean(), nullable=False),
    sa.Column('resubmission_deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('follow_up_instructions', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['decided_by'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['evidence_id'], ['cycle_report_request_info_testcase_source_evidence.id'], ),
    sa.ForeignKeyConstraint(['phase_id'], ['workflow_phases.phase_id'], ),
    sa.ForeignKeyConstraint(['test_case_id'], ['cycle_report_test_cases.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('evidence_id', 'decided_by', name='uq_tester_decision_evidence_tester')
    )
    
    # Add foreign key constraints for circular dependencies after all tables are created
    op.create_foreign_key('fk_lobs_created_by', 'lobs', 'users', ['created_by_id'], ['user_id'], ondelete='SET NULL')
    op.create_foreign_key('fk_lobs_updated_by', 'lobs', 'users', ['updated_by_id'], ['user_id'], ondelete='SET NULL')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop foreign key constraints for circular dependencies first
    op.drop_constraint('fk_lobs_updated_by', 'lobs', type_='foreignkey')
    op.drop_constraint('fk_lobs_created_by', 'lobs', type_='foreignkey')
    
    op.drop_table('cycle_report_request_info_tester_decisions')
    op.drop_table('cycle_report_request_info_evidence_validation')
    op.drop_table('cycle_report_test_cases_evidence')
    op.drop_table('cycle_report_request_info_testcase_source_evidence')
    op.drop_table('cycle_report_planning_pde_mapping_review_history')
    op.drop_index(op.f('ix_cycle_report_data_profiling_results_result_id'), table_name='cycle_report_data_profiling_results')
    op.drop_table('cycle_report_data_profiling_results')
    op.drop_table('cycle_report_data_profiling_attribute_results')
    op.drop_table('cycle_report_data_owner_lob_mapping')
    op.drop_table('observation_management_audit_logs')
    op.drop_index(op.f('ix_data_owner_sla_violations_violation_id'), table_name='data_owner_sla_violations')
    op.drop_table('data_owner_sla_violations')
    op.drop_table('cycle_report_scoping_attributes')
    op.drop_table('cycle_report_sample_selection_samples')
    op.drop_index(op.f('ix_cycle_report_rfi_query_validations_validation_id'), table_name='cycle_report_rfi_query_validations')
    op.drop_table('cycle_report_rfi_query_validations')
    op.drop_index(op.f('ix_cycle_report_request_info_evidence_version_id'), table_name='cycle_report_request_info_evidence')
    op.drop_index(op.f('ix_cycle_report_request_info_evidence_test_case_id'), table_name='cycle_report_request_info_evidence')
    op.drop_index(op.f('ix_cycle_report_request_info_evidence_sample_id'), table_name='cycle_report_request_info_evidence')
    op.drop_index(op.f('ix_cycle_report_request_info_evidence_data_owner_id'), table_name='cycle_report_request_info_evidence')
    op.drop_table('cycle_report_request_info_evidence')
    op.drop_table('cycle_report_planning_pde_mapping_reviews')
    op.drop_table('cycle_report_observation_version_items')
    op.drop_table('cycle_report_observation_mgmt_resolutions')
    op.drop_table('cycle_report_observation_mgmt_impact_assessments')
    op.drop_table('cycle_report_data_profiling_rules')
    op.drop_table('cycle_report_data_profiling_jobs')
    op.drop_index('idx_workflow_transitions_timing', table_name='workflow_transitions')
    op.drop_index('idx_workflow_transitions_execution', table_name='workflow_transitions')
    op.drop_table('workflow_transitions')
    op.drop_index(op.f('ix_workflow_activity_history_history_id'), table_name='workflow_activity_history')
    op.drop_index('ix_workflow_activity_history_changed_at', table_name='workflow_activity_history')
    op.drop_index('ix_workflow_activity_history_activity', table_name='workflow_activity_history')
    op.drop_table('workflow_activity_history')
    op.drop_index(op.f('ix_data_owner_assignments_assignment_id'), table_name='data_owner_assignments')
    op.drop_table('data_owner_assignments')
    op.drop_index('idx_test_execution_reviews_status', table_name='cycle_report_test_execution_reviews')
    op.drop_index('idx_test_execution_reviews_reviewed_by', table_name='cycle_report_test_execution_reviews')
    op.drop_index('idx_test_execution_reviews_phase_id', table_name='cycle_report_test_execution_reviews')
    op.drop_index('idx_test_execution_reviews_execution_id', table_name='cycle_report_test_execution_reviews')
    op.drop_table('cycle_report_test_execution_reviews')
    op.drop_index('idx_test_execution_audit_performed_by', table_name='cycle_report_test_execution_audit')
    op.drop_index('idx_test_execution_audit_performed_at', table_name='cycle_report_test_execution_audit')
    op.drop_index('idx_test_execution_audit_execution_id', table_name='cycle_report_test_execution_audit')
    op.drop_table('cycle_report_test_execution_audit')
    op.drop_table('cycle_report_test_cases')
    op.drop_table('cycle_report_scoping_versions')
    op.drop_table('cycle_report_sample_selection_versions')
    op.drop_table('cycle_report_planning_versions')
    op.drop_table('cycle_report_planning_pde_mappings')
    op.drop_table('cycle_report_observation_versions')
    op.drop_table('cycle_report_observation_mgmt_observation_records')
    op.drop_table('cycle_report_document_revisions')
    op.drop_table('cycle_report_document_extractions')
    op.drop_table('cycle_report_document_access_logs')
    op.drop_table('cycle_report_data_profiling_rule_versions')
    op.drop_table('cycle_report_data_profiling_configurations')
    op.drop_table('cycle_report_data_owner_lob_mapping_versions')
    op.drop_index(op.f('ix_attribute_version_comparisons_comparison_id'), table_name='attribute_version_comparisons')
    op.drop_table('attribute_version_comparisons')
    op.drop_index(op.f('ix_attribute_version_change_logs_log_id'), table_name='attribute_version_change_logs')
    op.drop_table('attribute_version_change_logs')
    op.drop_index('idx_mapping_source', table_name='attribute_mappings')
    op.drop_index('idx_mapping_security', table_name='attribute_mappings')
    op.drop_index('idx_mapping_attribute', table_name='attribute_mappings')
    op.drop_table('attribute_mappings')
    op.drop_index(op.f('ix_attribute_lob_assignments_deprecated_assignment_id'), table_name='attribute_lob_assignments_deprecated')
    op.drop_table('attribute_lob_assignments_deprecated')
    op.drop_index('idx_workflow_steps_status', table_name='workflow_steps')
    op.drop_index('idx_workflow_steps_phase', table_name='workflow_steps')
    op.drop_index('idx_workflow_steps_execution', table_name='workflow_steps')
    op.drop_table('workflow_steps')
    op.drop_index('idx_workflow_alerts_unresolved', table_name='workflow_alerts')
    op.drop_index('idx_workflow_alerts_severity', table_name='workflow_alerts')
    op.drop_table('workflow_alerts')
    op.drop_index('ix_workflow_activities_status', table_name='workflow_activities')
    op.drop_index('ix_workflow_activities_phase_id', table_name='workflow_activities')
    op.drop_index('ix_workflow_activities_cycle_report_phase', table_name='workflow_activities')
    op.drop_index('ix_workflow_activities_cycle_report', table_name='workflow_activities')
    op.drop_index('ix_workflow_activities_activity_name', table_name='workflow_activities')
    op.drop_index(op.f('ix_workflow_activities_activity_id'), table_name='workflow_activities')
    op.drop_table('workflow_activities')
    op.drop_index(op.f('ix_scoping_audit_log_audit_id'), table_name='scoping_audit_log')
    op.drop_table('scoping_audit_log')
    op.drop_index(op.f('ix_escalation_email_logs_log_id'), table_name='escalation_email_logs')
    op.drop_table('escalation_email_logs')
    op.drop_index('idx_query_source_type', table_name='data_queries')
    op.drop_table('data_queries')
    op.drop_index(op.f('ix_data_owner_phase_audit_log_audit_id'), table_name='data_owner_phase_audit_log')
    op.drop_index(op.f('ix_data_owner_phase_audit_log_action'), table_name='data_owner_phase_audit_log')
    op.drop_table('data_owner_phase_audit_log')
    op.drop_index(op.f('ix_data_owner_notifications_notification_id'), table_name='data_owner_notifications')
    op.drop_table('data_owner_notifications')
    op.drop_index(op.f('ix_data_owner_escalation_log_email_id'), table_name='data_owner_escalation_log')
    op.drop_table('data_owner_escalation_log')
    op.drop_index(op.f('ix_cycle_report_test_report_sections_id'), table_name='cycle_report_test_report_sections')
    op.drop_index('idx_test_report_sections_status', table_name='cycle_report_test_report_sections')
    op.drop_index('idx_test_report_sections_phase', table_name='cycle_report_test_report_sections')
    op.drop_index('idx_test_report_sections_cycle_report', table_name='cycle_report_test_report_sections')
    op.drop_index('idx_test_report_sections_approvals', table_name='cycle_report_test_report_sections')
    op.drop_table('cycle_report_test_report_sections')
    op.drop_index(op.f('ix_cycle_report_test_report_generation_id'), table_name='cycle_report_test_report_generation')
    op.drop_index('idx_test_report_generation_status', table_name='cycle_report_test_report_generation')
    op.drop_index('idx_test_report_generation_phase', table_name='cycle_report_test_report_generation')
    op.drop_index('idx_test_report_generation_cycle_report', table_name='cycle_report_test_report_generation')
    op.drop_table('cycle_report_test_report_generation')
    op.drop_index('idx_test_execution_results_test_case_id', table_name='cycle_report_test_execution_results')
    op.drop_index('idx_test_execution_results_phase_id', table_name='cycle_report_test_execution_results')
    op.drop_index('idx_test_execution_results_execution_status', table_name='cycle_report_test_execution_results')
    op.drop_index('idx_test_execution_results_executed_by', table_name='cycle_report_test_execution_results')
    op.drop_index('idx_test_execution_results_evidence_id', table_name='cycle_report_test_execution_results')
    op.drop_index('idx_test_execution_results_created_at', table_name='cycle_report_test_execution_results')
    op.drop_table('cycle_report_test_execution_results')
    op.drop_index(op.f('ix_cycle_report_rfi_data_sources_data_source_id'), table_name='cycle_report_rfi_data_sources')
    op.drop_table('cycle_report_rfi_data_sources')
    op.drop_index(op.f('ix_cycle_report_request_info_evidence_versions_phase_id'), table_name='cycle_report_request_info_evidence_versions')
    op.drop_table('cycle_report_request_info_evidence_versions')
    op.drop_index(op.f('ix_cycle_report_request_info_audit_logs_audit_id'), table_name='cycle_report_request_info_audit_logs')
    op.drop_index(op.f('ix_cycle_report_request_info_audit_logs_action'), table_name='cycle_report_request_info_audit_logs')
    op.drop_table('cycle_report_request_info_audit_logs')
    op.drop_table('cycle_report_planning_data_sources')
    op.drop_index(op.f('ix_cycle_report_planning_attributes_id'), table_name='cycle_report_planning_attributes')
    op.drop_index(op.f('ix_cycle_report_planning_attributes_attribute_name'), table_name='cycle_report_planning_attributes')
    op.drop_table('cycle_report_planning_attributes')
    op.drop_table('cycle_report_documents')
    op.drop_index(op.f('ix_cycle_report_data_profiling_uploads_id'), table_name='cycle_report_data_profiling_uploads')
    op.drop_table('cycle_report_data_profiling_uploads')
    op.drop_index('idx_profiling_exec_status', table_name='cycle_report_data_profiling_highvolume_executions')
    op.drop_index('idx_profiling_exec_cycle', table_name='cycle_report_data_profiling_highvolume_executions')
    op.drop_table('cycle_report_data_profiling_highvolume_executions')
    op.drop_index(op.f('ix_cycle_report_data_profiling_files_file_id'), table_name='cycle_report_data_profiling_files')
    op.drop_table('cycle_report_data_profiling_files')
    op.drop_index(op.f('ix_workflow_phases_phase_id'), table_name='workflow_phases')
    op.drop_table('workflow_phases')
    op.drop_index('idx_workflow_executions_status', table_name='workflow_executions')
    op.drop_index('idx_workflow_executions_started', table_name='workflow_executions')
    op.drop_index('idx_workflow_executions_cycle', table_name='workflow_executions')
    op.drop_table('workflow_executions')
    op.drop_index(op.f('ix_universal_sla_violation_trackings_violation_id'), table_name='universal_sla_violation_trackings')
    op.drop_table('universal_sla_violation_trackings')
    op.drop_index(op.f('ix_universal_sla_escalation_rules_escalation_rule_id'), table_name='universal_sla_escalation_rules')
    op.drop_table('universal_sla_escalation_rules')
    op.drop_index(op.f('ix_universal_assignment_history_history_id'), table_name='universal_assignment_history')
    op.drop_table('universal_assignment_history')
    op.drop_index(op.f('ix_rbac_user_roles_user_id'), table_name='rbac_user_roles')
    op.drop_index(op.f('ix_rbac_user_roles_expires_at'), table_name='rbac_user_roles')
    op.drop_table('rbac_user_roles')
    op.drop_index(op.f('ix_rbac_user_permissions_user_id'), table_name='rbac_user_permissions')
    op.drop_index(op.f('ix_rbac_user_permissions_expires_at'), table_name='rbac_user_permissions')
    op.drop_table('rbac_user_permissions')
    op.drop_table('rbac_role_permissions')
    op.drop_table('rbac_role_hierarchy')
    op.drop_index(op.f('ix_rbac_resource_permissions_user_id'), table_name='rbac_resource_permissions')
    op.drop_index(op.f('ix_rbac_resource_permissions_resource_type'), table_name='rbac_resource_permissions')
    op.drop_index(op.f('ix_rbac_resource_permissions_resource_permission_id'), table_name='rbac_resource_permissions')
    op.drop_index(op.f('ix_rbac_resource_permissions_resource_id'), table_name='rbac_resource_permissions')
    op.drop_table('rbac_resource_permissions')
    op.drop_index(op.f('ix_rbac_permission_audit_logs_target_type'), table_name='rbac_permission_audit_logs')
    op.drop_index(op.f('ix_rbac_permission_audit_logs_target_id'), table_name='rbac_permission_audit_logs')
    op.drop_index(op.f('ix_rbac_permission_audit_logs_performed_at'), table_name='rbac_permission_audit_logs')
    op.drop_index(op.f('ix_rbac_permission_audit_logs_audit_id'), table_name='rbac_permission_audit_logs')
    op.drop_table('rbac_permission_audit_logs')
    op.drop_table('metrics_phases')
    op.drop_table('metrics_execution')
    op.drop_index(op.f('ix_llm_audit_log_log_id'), table_name='llm_audit_log')
    op.drop_index(op.f('ix_llm_audit_log_llm_provider'), table_name='llm_audit_log')
    op.drop_table('llm_audit_log')
    op.drop_index(op.f('ix_historical_data_owner_assignments_deprecated_report_name'), table_name='historical_data_owner_assignments_deprecated')
    op.drop_index(op.f('ix_historical_data_owner_assignments_deprecated_history_id'), table_name='historical_data_owner_assignments_deprecated')
    op.drop_index(op.f('ix_historical_data_owner_assignments_deprecated_attribute_name'), table_name='historical_data_owner_assignments_deprecated')
    op.drop_table('historical_data_owner_assignments_deprecated')
    op.drop_index('idx_datasource_report', table_name='data_sources_v2')
    op.drop_table('data_sources_v2')
    op.drop_index(op.f('ix_cycle_reports_workflow_id'), table_name='cycle_reports')
    op.drop_table('cycle_reports')
    op.drop_table('cycle_report_planning_pde_mapping_approval_rules')
    op.drop_index('idx_activity_state_status', table_name='activity_states')
    op.drop_index('idx_activity_state_context', table_name='activity_states')
    op.drop_table('activity_states')
    op.drop_index('idx_workflow_metrics_type_period', table_name='workflow_metrics')
    op.drop_index('idx_workflow_metrics_phase_period', table_name='workflow_metrics')
    op.drop_table('workflow_metrics')
    op.drop_index(op.f('ix_workflow_activity_templates_template_id'), table_name='workflow_activity_templates')
    op.drop_index('ix_workflow_activity_templates_phase', table_name='workflow_activity_templates')
    op.drop_table('workflow_activity_templates')
    op.drop_index(op.f('ix_workflow_activity_dependencies_dependency_id'), table_name='workflow_activity_dependencies')
    op.drop_table('workflow_activity_dependencies')
    op.drop_index(op.f('ix_universal_sla_configurations_sla_type'), table_name='universal_sla_configurations')
    op.drop_index(op.f('ix_universal_sla_configurations_sla_config_id'), table_name='universal_sla_configurations')
    op.drop_table('universal_sla_configurations')
    op.drop_index(op.f('ix_universal_assignments_to_role'), table_name='universal_assignments')
    op.drop_index(op.f('ix_universal_assignments_status'), table_name='universal_assignments')
    op.drop_index(op.f('ix_universal_assignments_from_role'), table_name='universal_assignments')
    op.drop_index(op.f('ix_universal_assignments_due_date'), table_name='universal_assignments')
    op.drop_index(op.f('ix_universal_assignments_context_type'), table_name='universal_assignments')
    op.drop_index(op.f('ix_universal_assignments_assignment_type'), table_name='universal_assignments')
    op.drop_index(op.f('ix_universal_assignments_assignment_id'), table_name='universal_assignments')
    op.drop_table('universal_assignments')
    op.drop_index(op.f('ix_test_cycles_workflow_id'), table_name='test_cycles')
    op.drop_index(op.f('ix_test_cycles_cycle_name'), table_name='test_cycles')
    op.drop_index(op.f('ix_test_cycles_cycle_id'), table_name='test_cycles')
    op.drop_table('test_cycles')
    op.drop_index('idx_secure_access_user', table_name='secure_data_access_logs')
    op.drop_index('idx_secure_access_classification', table_name='secure_data_access_logs')
    op.drop_table('secure_data_access_logs')
    op.drop_index(op.f('ix_reports_report_number'), table_name='reports')
    op.drop_index(op.f('ix_reports_report_name'), table_name='reports')
    op.drop_index(op.f('ix_reports_id'), table_name='reports')
    op.drop_table('reports')
    op.drop_index(op.f('ix_regulatory_data_dictionaries_schedule_name'), table_name='regulatory_data_dictionaries')
    op.drop_index(op.f('ix_regulatory_data_dictionaries_report_name'), table_name='regulatory_data_dictionaries')
    op.drop_index(op.f('ix_regulatory_data_dictionaries_mandatory_or_optional'), table_name='regulatory_data_dictionaries')
    op.drop_index(op.f('ix_regulatory_data_dictionaries_line_item_name'), table_name='regulatory_data_dictionaries')
    op.drop_index(op.f('ix_regulatory_data_dictionaries_dict_id'), table_name='regulatory_data_dictionaries')
    op.drop_index('ix_rdd_report_schedule', table_name='regulatory_data_dictionaries')
    op.drop_index('ix_rdd_mandatory_search', table_name='regulatory_data_dictionaries')
    op.drop_index('ix_rdd_item_name_search', table_name='regulatory_data_dictionaries')
    op.drop_table('regulatory_data_dictionaries')
    op.drop_index(op.f('ix_rbac_roles_role_name'), table_name='rbac_roles')
    op.drop_index(op.f('ix_rbac_roles_role_id'), table_name='rbac_roles')
    op.drop_table('rbac_roles')
    op.drop_index(op.f('ix_rbac_resources_resource_type'), table_name='rbac_resources')
    op.drop_index(op.f('ix_rbac_resources_resource_name'), table_name='rbac_resources')
    op.drop_index(op.f('ix_rbac_resources_resource_id'), table_name='rbac_resources')
    op.drop_table('rbac_resources')
    op.drop_index(op.f('ix_rbac_permissions_resource'), table_name='rbac_permissions')
    op.drop_index(op.f('ix_rbac_permissions_permission_id'), table_name='rbac_permissions')
    op.drop_index(op.f('ix_rbac_permissions_action'), table_name='rbac_permissions')
    op.drop_table('rbac_permissions')
    op.drop_index(op.f('ix_audit_logs_audit_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_assignment_templates_template_id'), table_name='assignment_templates')
    op.drop_table('assignment_templates')
    op.drop_index('idx_activity_phase_sequence', table_name='activity_definitions')
    op.drop_index('idx_activity_code', table_name='activity_definitions')
    op.drop_table('activity_definitions')
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_lobs_lob_name'), table_name='lobs')
    op.drop_index(op.f('ix_lobs_lob_id'), table_name='lobs')
    op.drop_table('lobs')
    # ### end Alembic commands ###
