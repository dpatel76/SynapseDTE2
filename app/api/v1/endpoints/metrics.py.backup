"""
DEPRECATED: This file is deprecated in favor of metrics_clean.py
Please use metrics_clean.py for all new development.

Comprehensive Metrics API endpoints
Provides role-based dashboard metrics and analytics
"""

from typing import Dict, Any, Optional
from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import get_db
from app.core.dependencies import get_current_user
from app.core.auth import UserRoles
from app.models.user import User
from app.services.metrics_service import get_metrics_service, MetricsService
from app.services.benchmarking_service import get_benchmarking_service, BenchmarkingService

router = APIRouter()


@router.get("/dashboard/current-user")
async def get_current_user_dashboard_metrics(
    current_user: User = Depends(get_current_user),
    time_filter: Optional[str] = Query("current_cycle", description="Time filter: current_cycle, last_30_days, last_90_days, year_to_date"),
    db: AsyncSession = Depends(get_db),
    metrics_service: MetricsService = Depends(get_metrics_service)
) -> Dict[str, Any]:
    """Get dashboard metrics for current user's role with optional time filtering"""
    
    try:
        user_role = current_user.role
        
        if user_role == UserRoles.TEST_EXECUTIVE:
            return await metrics_service.get_test_manager_dashboard_metrics(current_user.user_id, db)
        elif user_role == UserRoles.REPORT_OWNER:
            return await metrics_service.get_report_owner_dashboard_metrics(current_user.user_id, db, time_filter)
        elif user_role == UserRoles.REPORT_OWNER_EXECUTIVE:
            return await metrics_service.get_report_owner_executive_dashboard_metrics(current_user.user_id, db)
        elif user_role == UserRoles.TESTER:
            return await metrics_service.get_tester_dashboard_metrics(current_user.user_id, db)
        elif user_role == UserRoles.DATA_EXECUTIVE:
            return await metrics_service.get_cdo_dashboard_metrics(current_user.user_id, db)
        elif user_role == UserRoles.DATA_OWNER:
            return await metrics_service.get_data_provider_dashboard_metrics(current_user.user_id, db)
        else:
            # Default metrics for admin or other roles
            return {
                "role": user_role,
                "user_id": current_user.user_id,
                "overview": {"message": "Dashboard metrics not available for this role"},
                "generated_at": "2024-01-01T00:00:00"
            }
            
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate dashboard metrics: {str(e)}"
        )


@router.get("/dashboard/{role}")
async def get_role_based_dashboard_metrics(
    role: str,
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db),
    metrics_service: MetricsService = Depends(get_metrics_service)
) -> Dict[str, Any]:
    """Get role-based dashboard metrics"""
    
    # Validate user has access to requested role metrics
    if current_user.role != role and current_user.role != UserRoles.ADMIN:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail=f"Access denied. Cannot access {role} metrics."
        )
    
    try:
        if role == UserRoles.TEST_EXECUTIVE:
            return await metrics_service.get_test_manager_dashboard_metrics(current_user.user_id, db)
        elif role == UserRoles.REPORT_OWNER:
            return await metrics_service.get_report_owner_dashboard_metrics(current_user.user_id, db)
        elif role == UserRoles.REPORT_OWNER_EXECUTIVE:
            return await metrics_service.get_report_owner_executive_dashboard_metrics(current_user.user_id, db)
        elif role == UserRoles.TESTER:
            return await metrics_service.get_tester_dashboard_metrics(current_user.user_id, db)
        elif role == UserRoles.DATA_EXECUTIVE:
            return await metrics_service.get_cdo_dashboard_metrics(current_user.user_id, db)
        elif role == UserRoles.DATA_OWNER:
            return await metrics_service.get_data_provider_dashboard_metrics(current_user.user_id, db)
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"Unsupported role: {role}"
            )
            
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate dashboard metrics: {str(e)}"
        )


@router.get("/analytics/system-wide")
async def get_system_wide_analytics(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db),
    metrics_service: MetricsService = Depends(get_metrics_service)
) -> Dict[str, Any]:
    """Get system-wide analytics and KPIs (Admin and Management roles only)"""
    
    # Check permissions
    if current_user.role not in [UserRoles.ADMIN, UserRoles.TEST_EXECUTIVE, UserRoles.REPORT_OWNER_EXECUTIVE, UserRoles.DATA_EXECUTIVE]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied. Management role required for system-wide analytics."
        )
    
    try:
        return await metrics_service.get_system_wide_analytics(db)
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate system analytics: {str(e)}"
        )


@router.get("/kpis/operational")
async def get_operational_kpis(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db),
    time_period: Optional[str] = Query("30d", description="Time period: 7d, 30d, 90d, 1y")
) -> Dict[str, Any]:
    """Get operational KPIs"""
    
    # Check permissions
    if current_user.role not in [UserRoles.ADMIN, UserRoles.TEST_EXECUTIVE, UserRoles.REPORT_OWNER_EXECUTIVE]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied. Management role required."
        )
    
    try:
        # Mock operational KPIs - would be implemented with real calculations
        return {
            "time_period": time_period,
            "cycle_completion_rate": 87.5,
            "average_cycle_duration_days": 14.2,
            "sla_compliance_percentage": 92.3,
            "issue_recurrence_rate": 5.8,
            "data_provider_response_time_hours": 18.4,
            "testing_efficiency_score": 85.2,
            "resource_utilization_percentage": 78.9,
            "generated_at": "2024-01-01T00:00:00"
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate operational KPIs: {str(e)}"
        )


@router.get("/kpis/quality")
async def get_quality_kpis(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db),
    time_period: Optional[str] = Query("30d", description="Time period: 7d, 30d, 90d, 1y")
) -> Dict[str, Any]:
    """Get quality KPIs"""
    
    # Check permissions
    if current_user.role not in [UserRoles.ADMIN, UserRoles.TEST_EXECUTIVE, UserRoles.REPORT_OWNER, UserRoles.REPORT_OWNER_EXECUTIVE]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied. Management or Report Owner role required."
        )
    
    try:
        # Mock quality KPIs - would be implemented with real calculations
        return {
            "time_period": time_period,
            "test_pass_rate": 94.2,
            "observation_resolution_time_hours": 36.5,
            "retest_frequency": 12.3,
            "documentation_quality_score": 88.7,
            "attribute_coverage_rate": 96.1,
            "data_quality_score": 91.4,
            "critical_issues_count": 3,
            "generated_at": "2024-01-01T00:00:00"
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate quality KPIs: {str(e)}"
        )


@router.get("/trends/performance")
async def get_performance_trends(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db),
    time_period: Optional[str] = Query("90d", description="Time period: 30d, 90d, 180d, 1y")
) -> Dict[str, Any]:
    """Get performance trend analysis"""
    
    # Check permissions
    if current_user.role not in [UserRoles.ADMIN, UserRoles.TEST_EXECUTIVE, UserRoles.REPORT_OWNER_EXECUTIVE]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied. Management role required."
        )
    
    try:
        # Mock trend analysis - would be implemented with real calculations
        return {
            "time_period": time_period,
            "performance_improvement_percentage": 15.3,
            "seasonal_patterns": {
                "q1": {"efficiency": 82.1, "quality": 89.3},
                "q2": {"efficiency": 85.7, "quality": 91.2},
                "q3": {"efficiency": 88.4, "quality": 93.1},
                "q4": {"efficiency": 87.9, "quality": 92.8}
            },
            "resource_utilization_trend": "increasing",
            "efficiency_gains_percentage": 12.7,
            "risk_reduction_percentage": 23.4,
            "cycle_time_improvement_percentage": 18.9,
            "generated_at": "2024-01-01T00:00:00"
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate performance trends: {str(e)}"
        )


@router.get("/benchmarks/industry")
async def get_industry_benchmarks(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db),
    benchmarking_service: BenchmarkingService = Depends(get_benchmarking_service)
) -> Dict[str, Any]:
    """Get industry benchmark comparisons (Executive role required)"""
    
    # Check permissions
    if current_user.role not in [UserRoles.ADMIN, UserRoles.REPORT_OWNER_EXECUTIVE]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied. Executive role required."
        )
    
    try:
        # Get current system metrics to compare against benchmarks
        metrics_service = get_metrics_service()
        system_analytics = await metrics_service.get_system_wide_analytics(db)
        
        # Extract key metrics for benchmarking
        our_metrics = {
            "cycle_completion_rate": 87.5,  # Would extract from system_analytics
            "sla_compliance_rate": 92.3,
            "test_pass_rate": 94.2,
            "data_quality_score": 91.4,
            "resource_utilization": 78.9,
            "automation_adoption": 67.8,
            "observation_resolution_time": 3.2,
            "audit_readiness_score": 89.7
        }
        
        return await benchmarking_service.get_industry_benchmarks(our_metrics)
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate industry benchmarks: {str(e)}"
        )


@router.get("/benchmarks/peers")
async def get_peer_comparison(
    organization_size: Optional[str] = Query("large", description="Organization size: small, medium, large, enterprise"),
    current_user: User = Depends(get_current_user),
    benchmarking_service: BenchmarkingService = Depends(get_benchmarking_service)
) -> Dict[str, Any]:
    """Get peer organization comparison"""
    
    # Check permissions
    if current_user.role not in [UserRoles.ADMIN, UserRoles.REPORT_OWNER_EXECUTIVE, UserRoles.TEST_EXECUTIVE]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied. Management role required."
        )
    
    try:
        return await benchmarking_service.get_peer_comparison(organization_size)
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate peer comparison: {str(e)}"
        )


@router.get("/benchmarks/regulatory")
async def get_regulatory_benchmarks(
    regulation_type: Optional[str] = Query("general", description="Regulation type: sox, gdpr, basel, general"),
    current_user: User = Depends(get_current_user),
    benchmarking_service: BenchmarkingService = Depends(get_benchmarking_service)
) -> Dict[str, Any]:
    """Get regulation-specific benchmarks"""
    
    # Check permissions
    if current_user.role not in [UserRoles.ADMIN, UserRoles.REPORT_OWNER_EXECUTIVE, UserRoles.DATA_EXECUTIVE]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied. Executive or CDO role required."
        )
    
    try:
        return await benchmarking_service.get_regulatory_benchmarks(regulation_type)
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate regulatory benchmarks: {str(e)}"
        )


@router.get("/benchmarks/trends")
async def get_benchmark_trends(
    time_period: Optional[str] = Query("quarterly", description="Time period: quarterly, yearly"),
    current_user: User = Depends(get_current_user),
    benchmarking_service: BenchmarkingService = Depends(get_benchmarking_service)
) -> Dict[str, Any]:
    """Get industry trend analysis"""
    
    # Check permissions
    if current_user.role not in [UserRoles.ADMIN, UserRoles.REPORT_OWNER_EXECUTIVE, UserRoles.TEST_EXECUTIVE]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied. Management role required."
        )
    
    try:
        return await benchmarking_service.get_trend_analysis(time_period)
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate trend analysis: {str(e)}"
        )


@router.get("/health/benchmarking-service")
async def get_benchmarking_service_health(
    current_user: User = Depends(get_current_user),
    benchmarking_service: BenchmarkingService = Depends(get_benchmarking_service)
) -> Dict[str, Any]:
    """Get benchmarking service health status"""
    
    try:
        return await benchmarking_service.health_check()
        
    except Exception as e:
        return {
            "service": "benchmarking",
            "status": "unhealthy",
            "error": str(e)
        }


@router.get("/reports/executive-summary")
async def get_executive_summary_report(
    current_user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db),
    time_period: Optional[str] = Query("30d", description="Time period: 7d, 30d, 90d, 1y")
) -> Dict[str, Any]:
    """Get executive summary report"""
    
    # Check permissions
    if current_user.role not in [UserRoles.ADMIN, UserRoles.REPORT_OWNER_EXECUTIVE]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Access denied. Executive role required."
        )
    
    try:
        # Mock executive summary - would be implemented with real calculations
        return {
            "time_period": time_period,
            "executive_summary": {
                "total_cycles_completed": 24,
                "total_reports_tested": 156,
                "overall_compliance_rate": 94.2,
                "critical_issues_identified": 7,
                "critical_issues_resolved": 6,
                "cost_savings_achieved": "$2.3M",
                "efficiency_improvement": "18.5%"
            },
            "key_achievements": [
                "Reduced average cycle time by 18.5%",
                "Achieved 94.2% compliance rate",
                "Implemented automated testing for 67% of attributes",
                "Zero regulatory violations this period"
            ],
            "areas_for_improvement": [
                "Increase data provider response time",
                "Enhance cross-LOB collaboration",
                "Expand automation coverage"
            ],
            "strategic_recommendations": [
                "Invest in additional automation tools",
                "Implement predictive analytics for risk assessment",
                "Enhance training programs for data providers"
            ],
            "risk_assessment": {
                "overall_risk_level": "Low",
                "emerging_risks": ["Regulatory changes", "Resource constraints"],
                "mitigation_strategies": ["Enhanced monitoring", "Cross-training initiatives"]
            },
            "generated_at": "2024-01-01T00:00:00"
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to generate executive summary: {str(e)}"
        )


@router.get("/health/metrics-service")
async def get_metrics_service_health(
    current_user: User = Depends(get_current_user)
) -> Dict[str, Any]:
    """Get metrics service health status"""
    
    try:
        return {
            "service": "metrics",
            "status": "healthy",
            "version": "1.0.0",
            "uptime": "99.9%",
            "last_calculation": "2024-01-01T00:00:00",
            "cache_status": "active",
            "database_connection": "healthy",
            "performance": {
                "average_response_time_ms": 245,
                "cache_hit_rate": 87.3,
                "calculation_accuracy": 99.8
            }
        }
        
    except Exception as e:
        return {
            "service": "metrics",
            "status": "unhealthy",
            "error": str(e)
        } 