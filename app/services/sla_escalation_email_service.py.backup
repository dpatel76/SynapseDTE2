"""
SLA Escalation Email Service
Handles automated email notifications and escalations for SLA violations
"""

import logging
import smtplib
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart
from email.mime.base import MimeBase
from email import encoders
import asyncio
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, or_
from jinja2 import Template

from app.core.config import settings
from app.core.database import get_db
from app.models import (
    User, TestCycle, CycleReport, WorkflowPhase, 
    SLAViolationTracking, SLAConfiguration, EscalationRule
)

logger = logging.getLogger(__name__)


class SLAEscalationEmailService:
    """Service for handling SLA escalation emails and notifications"""
    
    def __init__(self):
        self.smtp_server = settings.SMTP_SERVER
        self.smtp_port = settings.SMTP_PORT
        self.smtp_username = settings.SMTP_USERNAME
        self.smtp_password = settings.SMTP_PASSWORD
        self.from_email = settings.FROM_EMAIL
        
        # Email templates
        self.templates = {
            'sla_warning': self._get_sla_warning_template(),
            'sla_violation': self._get_sla_violation_template(),
            'escalation_level_1': self._get_escalation_level_1_template(),
            'escalation_level_2': self._get_escalation_level_2_template(),
            'escalation_critical': self._get_escalation_critical_template(),
            'daily_digest': self._get_daily_digest_template()
        }
    
    async def check_and_send_escalations(self, db: AsyncSession) -> Dict[str, Any]:
        """Check for SLA violations and send appropriate escalation emails"""
        try:
            results = {
                "processed_violations": 0,
                "escalations_sent": 0,
                "warnings_sent": 0,
                "errors": []
            }
            
            # Get active workflow phases that might have SLA violations
            phases_query = select(WorkflowPhase).where(
                and_(
                    WorkflowPhase.state.in_(['In Progress', 'Pending']),
                    WorkflowPhase.started_at.isnot(None)
                )
            )
            phases_result = await db.execute(phases_query)
            active_phases = phases_result.scalars().all()
            
            for phase in active_phases:
                try:
                    await self._process_phase_sla(phase, db, results)
                except Exception as e:
                    logger.error(f"Error processing SLA for phase {phase.phase_id}: {str(e)}")
                    results["errors"].append({
                        "phase_id": phase.phase_id,
                        "error": str(e)
                    })
            
            return results
            
        except Exception as e:
            logger.error(f"Error in SLA escalation check: {str(e)}")
            return {
                "processed_violations": 0,
                "escalations_sent": 0,
                "warnings_sent": 0,
                "errors": [{"general_error": str(e)}]
            }
    
    async def _process_phase_sla(self, phase: WorkflowPhase, db: AsyncSession, results: Dict[str, Any]):
        """Process SLA for a specific workflow phase"""
        # Get SLA configuration for this phase transition
        sla_query = select(SLAConfiguration).where(
            and_(
                SLAConfiguration.transition_name == phase.phase_name,
                SLAConfiguration.is_active == True
            )
        )
        sla_result = await db.execute(sla_query)
        sla_config = sla_result.scalar_one_or_none()
        
        if not sla_config:
            return  # No SLA configuration for this phase
        
        # Calculate time elapsed since phase started
        current_time = datetime.utcnow()
        time_elapsed = current_time - phase.started_at
        hours_elapsed = time_elapsed.total_seconds() / 3600
        
        # Check if SLA is approaching (80% of SLA time)
        sla_warning_threshold = sla_config.sla_hours * 0.8
        
        # Check if SLA is violated
        sla_violated = hours_elapsed >= sla_config.sla_hours
        sla_warning = hours_elapsed >= sla_warning_threshold and not sla_violated
        
        if sla_warning:
            await self._send_sla_warning(phase, sla_config, hours_elapsed, db)
            results["warnings_sent"] += 1
        
        if sla_violated:
            await self._handle_sla_violation(phase, sla_config, hours_elapsed, db, results)
            results["processed_violations"] += 1
    
    async def _send_sla_warning(self, phase: WorkflowPhase, sla_config: SLAConfiguration, hours_elapsed: float, db: AsyncSession):
        """Send SLA warning email"""
        try:
            # Get cycle report and users
            cycle_report = await self._get_cycle_report(phase.cycle_report_id, db)
            if not cycle_report:
                return
            
            # Get responsible users
            responsible_users = await self._get_responsible_users(cycle_report, sla_config, db)
            
            # Prepare email context
            context = {
                "phase_name": phase.phase_name,
                "cycle_name": cycle_report.cycle.cycle_name if cycle_report.cycle else "Unknown",
                "report_name": cycle_report.report.report_name if cycle_report.report else "Unknown",
                "hours_elapsed": round(hours_elapsed, 1),
                "sla_hours": sla_config.sla_hours,
                "time_remaining": round(sla_config.sla_hours - hours_elapsed, 1),
                "due_date": (phase.started_at + timedelta(hours=sla_config.sla_hours)).strftime("%Y-%m-%d %H:%M"),
                "phase_url": f"{settings.FRONTEND_URL}/cycles/{cycle_report.cycle_id}/reports/{cycle_report.cycle_report_id}"
            }
            
            # Send warning emails
            for user in responsible_users:
                await self._send_email(
                    user.email,
                    f"SLA Warning: {phase.phase_name} approaching deadline",
                    self.templates['sla_warning'],
                    {**context, "user_name": user.full_name}
                )
            
        except Exception as e:
            logger.error(f"Error sending SLA warning: {str(e)}")
    
    async def _handle_sla_violation(self, phase: WorkflowPhase, sla_config: SLAConfiguration, hours_elapsed: float, db: AsyncSession, results: Dict[str, Any]):
        """Handle SLA violation and send escalation emails"""
        try:
            # Check if violation already exists
            violation_query = select(SLAViolationTracking).where(
                and_(
                    SLAViolationTracking.cycle_report_id == phase.cycle_report_id,
                    SLAViolationTracking.phase_name == phase.phase_name
                )
            )
            violation_result = await db.execute(violation_query)
            existing_violation = violation_result.scalar_one_or_none()
            
            if not existing_violation:
                # Create new violation record
                violation = SLAViolationTracking(
                    cycle_report_id=phase.cycle_report_id,
                    phase_name=phase.phase_name,
                    sla_hours=sla_config.sla_hours,
                    actual_hours=hours_elapsed,
                    violation_detected_at=datetime.utcnow(),
                    escalation_level=1,
                    is_resolved=False
                )
                db.add(violation)
                await db.commit()
                existing_violation = violation
            
            # Handle escalation based on time elapsed
            await self._handle_escalation(existing_violation, sla_config, hours_elapsed, db)
            results["escalations_sent"] += 1
            
        except Exception as e:
            logger.error(f"Error handling SLA violation: {str(e)}")
    
    async def _handle_escalation(self, violation: SLAViolationTracking, sla_config: SLAConfiguration, hours_elapsed: float, db: AsyncSession):
        """Handle escalation levels based on violation severity"""
        try:
            # Get escalation rules for this SLA configuration
            escalation_query = select(EscalationRule).where(
                and_(
                    EscalationRule.sla_id == sla_config.sla_id,
                    EscalationRule.is_active == True
                )
            ).order_by(EscalationRule.escalation_level)
            escalation_result = await db.execute(escalation_query)
            escalation_rules = escalation_result.scalars().all()
            
            # Determine current escalation level
            current_escalation_level = 1
            for rule in escalation_rules:
                if hours_elapsed >= rule.escalation_hours:
                    current_escalation_level = rule.escalation_level
            
            # Only escalate if level has increased
            if current_escalation_level > violation.escalation_level:
                violation.escalation_level = current_escalation_level
                violation.last_escalated_at = datetime.utcnow()
                await db.commit()
                
                # Send escalation email
                await self._send_escalation_email(violation, sla_config, current_escalation_level, db)
            
        except Exception as e:
            logger.error(f"Error handling escalation: {str(e)}")
    
    async def _send_escalation_email(self, violation: SLAViolationTracking, sla_config: SLAConfiguration, escalation_level: int, db: AsyncSession):
        """Send escalation email based on level"""
        try:
            # Get cycle report and users
            cycle_report = await self._get_cycle_report(violation.cycle_report_id, db)
            if not cycle_report:
                return
            
            # Get escalation recipients based on level
            recipients = await self._get_escalation_recipients(cycle_report, sla_config, escalation_level, db)
            
            # Select appropriate template
            template_key = f'escalation_level_{escalation_level}' if escalation_level <= 2 else 'escalation_critical'
            template = self.templates.get(template_key, self.templates['sla_violation'])
            
            # Prepare email context
            context = {
                "escalation_level": escalation_level,
                "phase_name": violation.phase_name,
                "cycle_name": cycle_report.cycle.cycle_name if cycle_report.cycle else "Unknown",
                "report_name": cycle_report.report.report_name if cycle_report.report else "Unknown",
                "hours_overdue": round(violation.actual_hours - violation.sla_hours, 1),
                "sla_hours": violation.sla_hours,
                "violation_date": violation.violation_detected_at.strftime("%Y-%m-%d %H:%M"),
                "phase_url": f"{settings.FRONTEND_URL}/cycles/{cycle_report.cycle_id}/reports/{cycle_report.cycle_report_id}"
            }
            
            # Send escalation emails
            subject = f"SLA ESCALATION Level {escalation_level}: {violation.phase_name} - {cycle_report.report.report_name if cycle_report.report else 'Unknown Report'}"
            
            for recipient in recipients:
                await self._send_email(
                    recipient.email,
                    subject,
                    template,
                    {**context, "user_name": recipient.full_name}
                )
            
        except Exception as e:
            logger.error(f"Error sending escalation email: {str(e)}")
    
    async def send_daily_digest(self, db: AsyncSession) -> Dict[str, Any]:
        """Send daily digest of SLA status to managers"""
        try:
            # Get all SLA violations and warnings from the last 24 hours
            yesterday = datetime.utcnow() - timedelta(days=1)
            
            violations_query = select(SLAViolationTracking).where(
                SLAViolationTracking.violation_detected_at >= yesterday
            )
            violations_result = await db.execute(violations_query)
            recent_violations = violations_result.scalars().all()
            
            # Get all test managers and CDOs for digest
            managers_query = select(User).where(
                User.role.in_(['Test Executive', 'Data Executive'])
            )
            managers_result = await db.execute(managers_query)
            managers = managers_result.scalars().all()
            
            # Prepare digest context
            context = {
                "date": datetime.utcnow().strftime("%Y-%m-%d"),
                "total_violations": len(recent_violations),
                "critical_violations": len([v for v in recent_violations if v.escalation_level >= 3]),
                "violations": recent_violations
            }
            
            # Send digest to each manager
            sent_count = 0
            for manager in managers:
                try:
                    await self._send_email(
                        manager.email,
                        f"Daily SLA Digest - {context['date']}",
                        self.templates['daily_digest'],
                        {**context, "user_name": manager.full_name}
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(f"Error sending digest to {manager.email}: {str(e)}")
            
            return {
                "digest_sent": True,
                "recipients": sent_count,
                "violations_included": len(recent_violations)
            }
            
        except Exception as e:
            logger.error(f"Error sending daily digest: {str(e)}")
            return {
                "digest_sent": False,
                "error": str(e)
            }
    
    async def _send_email(self, to_email: str, subject: str, template: Template, context: Dict[str, Any]):
        """Send email using SMTP"""
        try:
            # Render template
            html_body = template.render(**context)
            
            # Create message
            msg = MimeMultipart('alternative')
            msg['Subject'] = subject
            msg['From'] = self.from_email
            msg['To'] = to_email
            
            # Add HTML content
            html_part = MimeText(html_body, 'html')
            msg.attach(html_part)
            
            # Send email
            if settings.ENVIRONMENT != 'test':  # Don't send real emails in test environment
                with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                    server.starttls()
                    server.login(self.smtp_username, self.smtp_password)
                    server.send_message(msg)
            
            logger.info(f"Email sent successfully to {to_email}: {subject}")
            
        except Exception as e:
            logger.error(f"Error sending email to {to_email}: {str(e)}")
            raise
    
    # Helper methods
    async def _get_cycle_report(self, cycle_report_id: int, db: AsyncSession):
        """Get cycle report with related data"""
        query = select(CycleReport).where(CycleReport.cycle_report_id == cycle_report_id)
        result = await db.execute(query)
        return result.scalar_one_or_none()
    
    async def _get_responsible_users(self, cycle_report, sla_config: SLAConfiguration, db: AsyncSession) -> List[User]:
        """Get users responsible for a transition"""
        # Get users based on 'to_role' in SLA configuration
        query = select(User).where(User.role == sla_config.to_role)
        result = await db.execute(query)
        return result.scalars().all()
    
    async def _get_escalation_recipients(self, cycle_report, sla_config: SLAConfiguration, escalation_level: int, db: AsyncSession) -> List[User]:
        """Get escalation recipients based on level"""
        if escalation_level == 1:
            # Level 1: Direct manager
            query = select(User).where(User.role == 'Test Executive')
        elif escalation_level == 2:
            # Level 2: Senior management
            query = select(User).where(User.role.in_(['Test Executive', 'Report Owner Executive']))
        else:
            # Level 3+: All management including CDO
            query = select(User).where(User.role.in_(['Test Executive', 'Report Owner Executive', 'Data Executive']))
        
        result = await db.execute(query)
        return result.scalars().all()
    
    # Email templates
    def _get_sla_warning_template(self) -> Template:
        """Get SLA warning email template"""
        template_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                .container { max-width: 600px; margin: 0 auto; }
                .header { background-color: #ff9800; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; background-color: #f5f5f5; }
                .footer { padding: 10px; text-align: center; font-size: 12px; color: #666; }
                .button { background-color: #2196f3; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h2>⚠️ SLA Warning</h2>
                </div>
                <div class="content">
                    <p>Dear {{ user_name }},</p>
                    <p>This is a warning that the following phase is approaching its SLA deadline:</p>
                    <ul>
                        <li><strong>Phase:</strong> {{ phase_name }}</li>
                        <li><strong>Cycle:</strong> {{ cycle_name }}</li>
                        <li><strong>Report:</strong> {{ report_name }}</li>
                        <li><strong>Time Elapsed:</strong> {{ hours_elapsed }} hours</li>
                        <li><strong>SLA Deadline:</strong> {{ sla_hours }} hours</li>
                        <li><strong>Time Remaining:</strong> {{ time_remaining }} hours</li>
                        <li><strong>Due Date:</strong> {{ due_date }}</li>
                    </ul>
                    <p>Please take action to complete this phase before the deadline to avoid SLA violation.</p>
                    <p><a href="{{ phase_url }}" class="button">View Phase Details</a></p>
                </div>
                <div class="footer">
                    <p>This is an automated message from the Regulatory Testing Management System.</p>
                </div>
            </div>
        </body>
        </html>
        """
        return Template(template_content)
    
    def _get_sla_violation_template(self) -> Template:
        """Get SLA violation email template"""
        template_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                .container { max-width: 600px; margin: 0 auto; }
                .header { background-color: #f44336; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; background-color: #f5f5f5; }
                .footer { padding: 10px; text-align: center; font-size: 12px; color: #666; }
                .button { background-color: #2196f3; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h2>🚨 SLA VIOLATION</h2>
                </div>
                <div class="content">
                    <p>Dear {{ user_name }},</p>
                    <p><strong>An SLA violation has been detected:</strong></p>
                    <ul>
                        <li><strong>Phase:</strong> {{ phase_name }}</li>
                        <li><strong>Cycle:</strong> {{ cycle_name }}</li>
                        <li><strong>Report:</strong> {{ report_name }}</li>
                        <li><strong>SLA Deadline:</strong> {{ sla_hours }} hours</li>
                        <li><strong>Hours Overdue:</strong> {{ hours_overdue }} hours</li>
                        <li><strong>Violation Date:</strong> {{ violation_date }}</li>
                    </ul>
                    <p>Immediate action is required to resolve this violation.</p>
                    <p><a href="{{ phase_url }}" class="button">Take Action Now</a></p>
                </div>
                <div class="footer">
                    <p>This is an automated message from the Regulatory Testing Management System.</p>
                </div>
            </div>
        </body>
        </html>
        """
        return Template(template_content)
    
    def _get_escalation_level_1_template(self) -> Template:
        """Get escalation level 1 email template"""
        return self._get_sla_violation_template()  # Same as basic violation for level 1
    
    def _get_escalation_level_2_template(self) -> Template:
        """Get escalation level 2 email template"""
        template_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                .container { max-width: 600px; margin: 0 auto; }
                .header { background-color: #d32f2f; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; background-color: #f5f5f5; }
                .footer { padding: 10px; text-align: center; font-size: 12px; color: #666; }
                .button { background-color: #2196f3; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }
                .urgent { background-color: #ffebee; padding: 15px; border-left: 4px solid #f44336; margin: 15px 0; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h2>🚨 ESCALATION LEVEL {{ escalation_level }} - URGENT</h2>
                </div>
                <div class="content">
                    <p>Dear {{ user_name }},</p>
                    <div class="urgent">
                        <p><strong>This is an escalated SLA violation requiring immediate senior management attention.</strong></p>
                    </div>
                    <ul>
                        <li><strong>Phase:</strong> {{ phase_name }}</li>
                        <li><strong>Cycle:</strong> {{ cycle_name }}</li>
                        <li><strong>Report:</strong> {{ report_name }}</li>
                        <li><strong>SLA Deadline:</strong> {{ sla_hours }} hours</li>
                        <li><strong>Hours Overdue:</strong> {{ hours_overdue }} hours</li>
                        <li><strong>Escalation Level:</strong> {{ escalation_level }}</li>
                        <li><strong>Violation Date:</strong> {{ violation_date }}</li>
                    </ul>
                    <p>This violation has escalated due to prolonged non-resolution. Senior management intervention may be required.</p>
                    <p><a href="{{ phase_url }}" class="button">Review and Take Action</a></p>
                </div>
                <div class="footer">
                    <p>This is an automated escalation from the Regulatory Testing Management System.</p>
                </div>
            </div>
        </body>
        </html>
        """
        return Template(template_content)
    
    def _get_escalation_critical_template(self) -> Template:
        """Get critical escalation email template"""
        template_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                .container { max-width: 600px; margin: 0 auto; }
                .header { background-color: #b71c1c; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; background-color: #f5f5f5; }
                .footer { padding: 10px; text-align: center; font-size: 12px; color: #666; }
                .button { background-color: #2196f3; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; }
                .critical { background-color: #ffcdd2; padding: 20px; border: 2px solid #f44336; margin: 15px 0; text-align: center; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h2>🚨 CRITICAL ESCALATION - EXECUTIVE ATTENTION REQUIRED</h2>
                </div>
                <div class="content">
                    <p>Dear {{ user_name }},</p>
                    <div class="critical">
                        <h3>CRITICAL SLA VIOLATION</h3>
                        <p><strong>This violation requires immediate executive intervention and may have regulatory implications.</strong></p>
                    </div>
                    <ul>
                        <li><strong>Phase:</strong> {{ phase_name }}</li>
                        <li><strong>Cycle:</strong> {{ cycle_name }}</li>
                        <li><strong>Report:</strong> {{ report_name }}</li>
                        <li><strong>SLA Deadline:</strong> {{ sla_hours }} hours</li>
                        <li><strong>Hours Overdue:</strong> {{ hours_overdue }} hours</li>
                        <li><strong>Escalation Level:</strong> {{ escalation_level }}</li>
                        <li><strong>Violation Date:</strong> {{ violation_date }}</li>
                    </ul>
                    <p><strong>Immediate Actions Required:</strong></p>
                    <ul>
                        <li>Review the blocked phase and identify root cause</li>
                        <li>Assign additional resources if needed</li>
                        <li>Escalate to regulatory compliance team if necessary</li>
                        <li>Document resolution steps for audit trail</li>
                    </ul>
                    <p><a href="{{ phase_url }}" class="button">Take Immediate Action</a></p>
                </div>
                <div class="footer">
                    <p>This is a critical escalation from the Regulatory Testing Management System.</p>
                </div>
            </div>
        </body>
        </html>
        """
        return Template(template_content)
    
    def _get_daily_digest_template(self) -> Template:
        """Get daily digest email template"""
        template_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                .container { max-width: 800px; margin: 0 auto; }
                .header { background-color: #2196f3; color: white; padding: 20px; text-align: center; }
                .content { padding: 20px; background-color: #f5f5f5; }
                .footer { padding: 10px; text-align: center; font-size: 12px; color: #666; }
                .summary { background-color: white; padding: 15px; border-radius: 4px; margin: 15px 0; }
                .violation { background-color: #ffebee; padding: 10px; margin: 10px 0; border-left: 4px solid #f44336; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h2>📊 Daily SLA Digest - {{ date }}</h2>
                </div>
                <div class="content">
                    <p>Dear {{ user_name }},</p>
                    <div class="summary">
                        <h3>Summary for {{ date }}</h3>
                        <ul>
                            <li><strong>Total SLA Violations:</strong> {{ total_violations }}</li>
                            <li><strong>Critical Violations:</strong> {{ critical_violations }}</li>
                        </ul>
                    </div>
                    
                    {% if violations %}
                    <h3>Recent Violations:</h3>
                    {% for violation in violations %}
                    <div class="violation">
                        <strong>{{ violation.phase_name }}</strong> - Level {{ violation.escalation_level }}<br>
                        <small>{{ violation.violation_detected_at.strftime('%Y-%m-%d %H:%M') }} - {{ violation.actual_hours - violation.sla_hours }} hours overdue</small>
                    </div>
                    {% endfor %}
                    {% endif %}
                    
                    <p>Please review these violations and take appropriate action to maintain compliance.</p>
                </div>
                <div class="footer">
                    <p>This is an automated daily digest from the Regulatory Testing Management System.</p>
                </div>
            </div>
        </body>
        </html>
        """
        return Template(template_content)


# Global service instance
sla_escalation_email_service = SLAEscalationEmailService()


def get_sla_escalation_email_service() -> SLAEscalationEmailService:
    """Get the global SLA escalation email service instance"""
    return sla_escalation_email_service 