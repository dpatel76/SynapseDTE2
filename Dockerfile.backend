# Multi-stage Dockerfile for SynapseDTE Backend Service
# Optimized for security, size, and performance

# Stage 1: Builder
FROM python:3.11-slim-bookworm AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /build

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies to user directory
RUN pip install --user --no-cache-dir -r requirements.txt

# Stage 2: Runtime
FROM python:3.11-slim-bookworm AS runtime

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # PostgreSQL client for migrations
    postgresql-client \
    # Required for python-magic
    libmagic1 \
    # Health check
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Create necessary directories
RUN mkdir -p /app /app/uploads /app/logs && \
    chown -R appuser:appuser /app

# Copy Python packages from builder
COPY --from=builder /root/.local /home/appuser/.local

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=appuser:appuser ./app ./app
COPY --chown=appuser:appuser ./alembic ./alembic
COPY --chown=appuser:appuser ./alembic.ini ./alembic.ini
COPY --chown=appuser:appuser ./scripts/docker/bypass_migrations.py ./scripts/docker/bypass_migrations.py
COPY --chown=appuser:appuser ./scripts/docker/run_migrations.py ./scripts/docker/run_migrations.py
COPY --chown=appuser:appuser ./scripts/docker/load_seed_data.py ./scripts/docker/load_seed_data.py
COPY --chown=appuser:appuser ./scripts/docker/create_seed_data.sql ./scripts/docker/create_seed_data.sql

# Create uploads and logs directories
RUN mkdir -p /app/uploads /app/logs && chown -R appuser:appuser /app/uploads /app/logs

# Copy startup script
COPY --chown=appuser:appuser ./scripts/docker/backend-entrypoint.sh /app/start.sh
RUN chmod +x /app/start.sh

# Create logging configuration
RUN echo '{\n\
  "version": 1,\n\
  "disable_existing_loggers": false,\n\
  "formatters": {\n\
    "default": {\n\
      "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"\n\
    },\n\
    "json": {\n\
      "()": "pythonjsonlogger.jsonlogger.JsonFormatter",\n\
      "format": "%(asctime)s %(name)s %(levelname)s %(message)s"\n\
    }\n\
  },\n\
  "handlers": {\n\
    "console": {\n\
      "class": "logging.StreamHandler",\n\
      "level": "INFO",\n\
      "formatter": "json",\n\
      "stream": "ext://sys.stdout"\n\
    }\n\
  },\n\
  "root": {\n\
    "level": "INFO",\n\
    "handlers": ["console"]\n\
  }\n\
}' > /app/logging.json

# Switch to non-root user
USER appuser

# Set Python path
ENV PYTHONPATH=/app
ENV PATH=/home/appuser/.local/bin:$PATH

# Environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8000/api/v1/health || exit 1

# Start command
CMD ["/app/start.sh"]