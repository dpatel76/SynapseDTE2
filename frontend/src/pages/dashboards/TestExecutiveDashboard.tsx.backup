import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Card,
  CardContent,
  Button,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  LinearProgress,
  Alert,
  IconButton,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material';
import {
  Dashboard as DashboardIcon,
  TrendingUp,
  TrendingDown,
  Warning,
  CheckCircle,
  Schedule,
  People,
  Assignment,
  Visibility,
  Refresh as RefreshIcon
} from '@mui/icons-material';
import { useAuth } from '../../contexts/AuthContext';
import apiClient from '../../api/client';

interface DashboardMetrics {
  role: string;
  user_id: number;
  overview: {
    total_cycles: number;
    active_cycles: number;
    completed_cycles: number;
    total_reports: number;
    reports_on_track: number;
    reports_at_risk: number;
    reports_past_due: number;
  };
  cycle_progress: {
    total_reports: number;
    on_track: number;
    at_risk: number;
    past_due: number;
    completed: number;
    completion_rate: number;
  };
  team_performance: {
    team_size: number;
    individual_performance: Array<{
      tester_id: number;
      tester_name: string;
      total_assignments: number;
      completed_assignments: number;
      completion_rate: number;
    }>;
    average_completion_rate: number;
  };
  sla_compliance: {
    total_slas: number;
    violations: number;
    compliance_rate: number;
  };
  bottlenecks: {
    identified_bottlenecks: Array<{
      phase: string;
      average_duration_hours: number;
      instances: number;
    }>;
  };
  quality_metrics: {
    total_observations: number;
    critical_observations: number;
    resolved_observations: number;
    resolution_rate: number;
    quality_score: number;
  };
  generated_at: string;
}

const TestExecutiveDashboard: React.FC = () => {
  const { user } = useAuth();
  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [detailsOpen, setDetailsOpen] = useState(false);
  const [selectedBottleneck, setSelectedBottleneck] = useState<any>(null);

  useEffect(() => {
    loadDashboardMetrics();
  }, []);

  const loadDashboardMetrics = async () => {
    try {
      setLoading(true);
      setError(null);
      const response = await apiClient.get('/metrics/dashboard/current-user');
      
      // Ensure the response has the expected structure with default values
      const metricsData = {
        ...response.data,
        overview: {
          total_cycles: 0,
          active_cycles: 0,
          completed_cycles: 0,
          total_reports: 0,
          reports_on_track: 0,
          reports_at_risk: 0,
          reports_past_due: 0,
          ...response.data?.overview
        },
        cycle_progress: {
          total_reports: 0,
          on_track: 0,
          at_risk: 0,
          past_due: 0,
          completed: 0,
          completion_rate: 0,
          ...response.data?.cycle_progress
        },
        team_performance: {
          team_size: 0,
          individual_performance: [],
          average_completion_rate: 0,
          ...response.data?.team_performance
        },
        sla_compliance: {
          total_slas: 0,
          violations: 0,
          compliance_rate: 0,
          ...response.data?.sla_compliance
        },
        bottlenecks: {
          identified_bottlenecks: [],
          ...response.data?.bottlenecks
        },
        quality_metrics: {
          total_observations: 0,
          critical_observations: 0,
          resolved_observations: 0,
          resolution_rate: 0,
          quality_score: 0,
          ...response.data?.quality_metrics
        }
      };
      
      setMetrics(metricsData);
    } catch (err: any) {
      console.error('Error loading dashboard metrics:', err);
      
      // If the endpoint doesn't exist or returns an error, provide mock data
      if (err.response?.status === 404 || err.response?.status === 500) {
        console.log('Dashboard metrics endpoint not available, using mock data');
        setMetrics({
          role: 'Test Executive',
          user_id: user?.user_id || 0,
          overview: {
            total_cycles: 3,
            active_cycles: 2,
            completed_cycles: 1,
            total_reports: 15,
            reports_on_track: 10,
            reports_at_risk: 3,
            reports_past_due: 2,
          },
          cycle_progress: {
            total_reports: 15,
            on_track: 10,
            at_risk: 3,
            past_due: 2,
            completed: 8,
            completion_rate: 53,
          },
          team_performance: {
            team_size: 4,
            individual_performance: [
              { tester_id: 1, tester_name: 'Jane Tester', total_assignments: 5, completed_assignments: 4, completion_rate: 80 },
              { tester_id: 2, tester_name: 'Bob Smith', total_assignments: 4, completed_assignments: 2, completion_rate: 50 },
              { tester_id: 3, tester_name: 'Alice Johnson', total_assignments: 3, completed_assignments: 2, completion_rate: 67 },
              { tester_id: 4, tester_name: 'Charlie Brown', total_assignments: 3, completed_assignments: 0, completion_rate: 0 },
            ],
            average_completion_rate: 49,
          },
          sla_compliance: {
            total_slas: 12,
            violations: 2,
            compliance_rate: 83,
          },
          bottlenecks: {
            identified_bottlenecks: [
              { phase: 'Test Execution', average_duration_hours: 48, instances: 3 },
              { phase: 'Sample Selection', average_duration_hours: 24, instances: 2 },
            ],
          },
          quality_metrics: {
            total_observations: 25,
            critical_observations: 3,
            resolved_observations: 20,
            resolution_rate: 80,
            quality_score: 85,
          },
          generated_at: new Date().toISOString(),
        });
      } else {
        setError('Failed to load dashboard metrics');
      }
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'on track': case 'completed': return 'success';
      case 'at risk': return 'warning';
      case 'past due': return 'error';
      default: return 'default';
    }
  };

  const formatPercentage = (value: number) => `${Math.round(value)}%`;

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography variant="h4" gutterBottom>
          <DashboardIcon sx={{ mr: 2, verticalAlign: 'middle' }} />
          Test Executive Dashboard
        </Typography>
        <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
          <Typography>Loading dashboard metrics...</Typography>
        </Box>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography variant="h4" gutterBottom>
          <DashboardIcon sx={{ mr: 2, verticalAlign: 'middle' }} />
          Test Executive Dashboard
        </Typography>
        <Alert severity="error" action={
          <Button color="inherit" size="small" onClick={loadDashboardMetrics}>
            Retry
          </Button>
        }>
          {error}
        </Alert>
      </Box>
    );
  }

  if (!metrics) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography variant="h4" gutterBottom>
          <DashboardIcon sx={{ mr: 2, verticalAlign: 'middle' }} />
          Test Executive Dashboard
        </Typography>
        <Alert severity="info">
          No dashboard data available.
        </Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4">
          <DashboardIcon sx={{ mr: 2, verticalAlign: 'middle' }} />
          Test Executive Dashboard
        </Typography>
        <Tooltip title="Refresh Data">
          <IconButton onClick={loadDashboardMetrics}>
            <RefreshIcon />
          </IconButton>
        </Tooltip>
      </Box>

      {/* Overview Cards */}
      <Box sx={{ 
        display: 'grid', 
        gridTemplateColumns: { xs: 'repeat(1, 1fr)', sm: 'repeat(2, 1fr)', md: 'repeat(4, 1fr)' },
        gap: 3,
        mb: 4 
      }}>
        <Card>
          <CardContent>
            <Box display="flex" alignItems="center" justifyContent="space-between">
              <Box>
                <Typography variant="h4" color="primary">
                  {metrics?.overview?.active_cycles || 0}
                </Typography>
                <Typography variant="subtitle2">Active Cycles</Typography>
                <Typography variant="caption" color="text.secondary">
                  {metrics?.overview?.total_cycles || 0} total
                </Typography>
              </Box>
              <Assignment color="primary" sx={{ fontSize: 40 }} />
            </Box>
          </CardContent>
        </Card>

        <Card>
          <CardContent>
            <Box display="flex" alignItems="center" justifyContent="space-between">
              <Box>
                <Typography variant="h4" color="success.main">
                  {metrics?.overview?.reports_on_track || 0}
                </Typography>
                <Typography variant="subtitle2">Reports On Track</Typography>
                <Typography variant="caption" color="text.secondary">
                  {metrics?.overview?.total_reports || 0} total
                </Typography>
              </Box>
              <CheckCircle color="success" sx={{ fontSize: 40 }} />
            </Box>
          </CardContent>
        </Card>

        <Card>
          <CardContent>
            <Box display="flex" alignItems="center" justifyContent="space-between">
              <Box>
                <Typography variant="h4" color="warning.main">
                  {metrics?.overview?.reports_at_risk || 0}
                </Typography>
                <Typography variant="subtitle2">Reports At Risk</Typography>
                <Typography variant="caption" color="text.secondary">
                  Need attention
                </Typography>
              </Box>
              <Warning color="warning" sx={{ fontSize: 40 }} />
            </Box>
          </CardContent>
        </Card>

        <Card>
          <CardContent>
            <Box display="flex" alignItems="center" justifyContent="space-between">
              <Box>
                <Typography variant="h4" color="error.main">
                  {metrics?.overview?.reports_past_due || 0}
                </Typography>
                <Typography variant="subtitle2">Reports Past Due</Typography>
                <Typography variant="caption" color="text.secondary">
                  Urgent action required
                </Typography>
              </Box>
              <Schedule color="error" sx={{ fontSize: 40 }} />
            </Box>
          </CardContent>
        </Card>
      </Box>

      {/* Main Dashboard Content */}
      <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', lg: '2fr 1fr' }, gap: 3, mb: 4 }}>
        {/* Cycle Progress */}
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              Cycle Progress Overview
            </Typography>
            <Box sx={{ mb: 3 }}>
              <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                <Typography variant="body2">Overall Completion Rate</Typography>
                <Typography variant="body2" color="text.secondary">
                  {formatPercentage(metrics?.cycle_progress?.completion_rate || 0)}
                </Typography>
              </Box>
              <LinearProgress 
                variant="determinate" 
                value={metrics?.cycle_progress?.completion_rate || 0} 
                sx={{ height: 8, borderRadius: 4 }}
                color={(metrics?.cycle_progress?.completion_rate || 0) >= 80 ? 'success' : 
                       (metrics?.cycle_progress?.completion_rate || 0) >= 60 ? 'warning' : 'error'}
              />
            </Box>
            
            <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: 2 }}>
              <Box textAlign="center" p={1}>
                <Typography variant="h6" color="success.main">
                  {metrics?.cycle_progress?.completed || 0}
                </Typography>
                <Typography variant="caption">Completed</Typography>
              </Box>
              <Box textAlign="center" p={1}>
                <Typography variant="h6" color="info.main">
                  {metrics?.cycle_progress?.on_track || 0}
                </Typography>
                <Typography variant="caption">On Track</Typography>
              </Box>
            </Box>
          </CardContent>
        </Card>

        {/* SLA Compliance */}
        <Card>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              SLA Compliance
            </Typography>
            <Box textAlign="center" py={2}>
              <Typography variant="h3" color={
                (metrics?.sla_compliance?.compliance_rate || 0) >= 95 ? 'success.main' :
                (metrics?.sla_compliance?.compliance_rate || 0) >= 85 ? 'warning.main' : 'error.main'
              }>
                {formatPercentage(metrics?.sla_compliance?.compliance_rate || 0)}
              </Typography>
              <Typography variant="subtitle2" color="text.secondary">
                Compliance Rate
              </Typography>
              <Typography variant="caption" display="block" mt={1}>
                {metrics?.sla_compliance?.violations || 0} violations out of {metrics?.sla_compliance?.total_slas || 0} SLAs
              </Typography>
            </Box>
          </CardContent>
        </Card>
      </Box>

      {/* Team Performance */}
      <Card sx={{ mb: 4 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Team Performance
          </Typography>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Team Member</TableCell>
                  <TableCell align="center">Total Assignments</TableCell>
                  <TableCell align="center">Completed</TableCell>
                  <TableCell align="center">Completion Rate</TableCell>
                  <TableCell align="center">Status</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {(metrics?.team_performance?.individual_performance || []).map((member) => (
                  <TableRow key={member.tester_id}>
                    <TableCell>
                      <Box display="flex" alignItems="center" gap={1}>
                        <People fontSize="small" color="action" />
                        <Typography variant="body2">
                          {member.tester_name}
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell align="center">{member.total_assignments}</TableCell>
                    <TableCell align="center">{member.completed_assignments}</TableCell>
                    <TableCell align="center">
                      <Typography variant="body2" color={
                        member.completion_rate >= 80 ? 'success.main' :
                        member.completion_rate >= 60 ? 'warning.main' : 'error.main'
                      }>
                        {formatPercentage(member.completion_rate)}
                      </Typography>
                    </TableCell>
                    <TableCell align="center">
                      <Chip 
                        label={
                          member.completion_rate >= 80 ? 'On Track' :
                          member.completion_rate >= 60 ? 'At Risk' : 'Behind'
                        }
                        color={getStatusColor(
                          member.completion_rate >= 80 ? 'On Track' :
                          member.completion_rate >= 60 ? 'At Risk' : 'Past Due'
                        )}
                        size="small"
                      />
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
          <Box mt={2} p={2} bgcolor="grey.50" borderRadius={1}>
            <Typography variant="subtitle2" gutterBottom>
              Team Average: {formatPercentage(metrics?.team_performance?.average_completion_rate || 0)}
            </Typography>
            <Typography variant="caption" color="text.secondary">
              Team size: {metrics?.team_performance?.team_size || 0} members
            </Typography>
          </Box>
        </CardContent>
      </Card>

      {/* Bottlenecks Analysis */}
      {(metrics?.bottlenecks?.identified_bottlenecks || []).length > 0 && (
        <Card sx={{ mb: 4 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom>
              Identified Bottlenecks
            </Typography>
            <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: 'repeat(2, 1fr)' }, gap: 2 }}>
              {(metrics?.bottlenecks?.identified_bottlenecks || []).map((bottleneck, index) => (
                <Paper key={index} sx={{ p: 2, bgcolor: 'warning.light', color: 'warning.contrastText' }}>
                  <Box display="flex" justifyContent="space-between" alignItems="center">
                    <Box>
                      <Typography variant="subtitle2" fontWeight="medium">
                        {bottleneck.phase}
                      </Typography>
                      <Typography variant="caption">
                        Avg: {Math.round(bottleneck.average_duration_hours)}h ({bottleneck.instances} instances)
                      </Typography>
                    </Box>
                    <Button 
                      size="small" 
                      onClick={() => {
                        setSelectedBottleneck(bottleneck);
                        setDetailsOpen(true);
                      }}
                      startIcon={<Visibility />}
                    >
                      Details
                    </Button>
                  </Box>
                </Paper>
              ))}
            </Box>
          </CardContent>
        </Card>
      )}

      {/* Quality Metrics */}
      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Quality Metrics
          </Typography>
          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: 'repeat(2, 1fr)', md: 'repeat(4, 1fr)' }, gap: 2 }}>
            <Box textAlign="center" p={2}>
              <Typography variant="h5" color="primary">
                {metrics?.quality_metrics?.total_observations || 0}
              </Typography>
              <Typography variant="caption">Total Observations</Typography>
            </Box>
            <Box textAlign="center" p={2}>
              <Typography variant="h5" color="error.main">
                {metrics?.quality_metrics?.critical_observations || 0}
              </Typography>
              <Typography variant="caption">Critical Issues</Typography>
            </Box>
            <Box textAlign="center" p={2}>
              <Typography variant="h5" color="success.main">
                {formatPercentage(metrics?.quality_metrics?.resolution_rate || 0)}
              </Typography>
              <Typography variant="caption">Resolution Rate</Typography>
            </Box>
            <Box textAlign="center" p={2}>
              <Typography variant="h5" color={
                (metrics?.quality_metrics?.quality_score || 0) >= 90 ? 'success.main' :
                (metrics?.quality_metrics?.quality_score || 0) >= 75 ? 'warning.main' : 'error.main'
              }>
                {metrics?.quality_metrics?.quality_score || 0}
              </Typography>
              <Typography variant="caption">Quality Score</Typography>
            </Box>
          </Box>
        </CardContent>
      </Card>

      {/* Bottleneck Details Dialog */}
      <Dialog open={detailsOpen} onClose={() => setDetailsOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Bottleneck Details</DialogTitle>
        <DialogContent>
          {selectedBottleneck && (
            <Box>
              <Typography variant="h6" gutterBottom>
                {selectedBottleneck.phase}
              </Typography>
              <Typography variant="body2" paragraph>
                Average Duration: {Math.round(selectedBottleneck.average_duration_hours)} hours
              </Typography>
              <Typography variant="body2" paragraph>
                Instances: {selectedBottleneck.instances}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                This phase is taking longer than expected and may require process optimization or additional resources.
              </Typography>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDetailsOpen(false)}>Close</Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default TestExecutiveDashboard; 