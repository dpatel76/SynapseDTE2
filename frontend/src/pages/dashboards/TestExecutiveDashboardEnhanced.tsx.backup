import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  Card,
  CardContent,
  Button,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  LinearProgress,
  Alert,
  IconButton,
  Tooltip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Grid,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Divider,
  CircularProgress,
  Tab,
  Tabs
} from '@mui/material';
import {
  Dashboard as DashboardIcon,
  TrendingUp,
  TrendingDown,
  Warning,
  CheckCircle,
  Schedule,
  People,
  Assignment,
  Visibility,
  Refresh as RefreshIcon,
  Speed,
  BugReport,
  Timeline,
  BarChart,
  CompareArrows
} from '@mui/icons-material';
import { useAuth } from '../../contexts/AuthContext';
import { metricsApi } from '../../api/metrics';
import { cyclesApi } from '../../api/cycles';
import { useQuery } from '@tanstack/react-query';
import { ActivityStateBadge } from '../../components/common/ActivityStateBadge';
import { Line, Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip as ChartTooltip,
  Legend,
  ArcElement
} from 'chart.js';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  ChartTooltip,
  Legend
);

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      {...other}
    >
      {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}
    </div>
  );
}

const TestExecutiveDashboardEnhanced: React.FC = () => {
  const { user } = useAuth();
  const [selectedCycleId, setSelectedCycleId] = useState<string | null>(null);
  const [selectedLob, setSelectedLob] = useState<string>('all');
  const [tabValue, setTabValue] = useState(0);
  const [showComparison, setShowComparison] = useState(false);
  const [comparisonCycleId, setComparisonCycleId] = useState<string | null>(null);

  // Fetch available cycles
  const { data: cyclesData } = useQuery({
    queryKey: ['cycles'],
    queryFn: async () => {
      const response = await cyclesApi.getAll();
      return response.items;
    },
    enabled: !!user?.user_id,
  });

  // Set selected cycle when cycles load
  useEffect(() => {
    if (cyclesData && cyclesData.length > 0 && !selectedCycleId) {
      const activeCycle = cyclesData.find((c: any) => c.status === 'active') || cyclesData[0];
      setSelectedCycleId(activeCycle.cycle_id.toString());
    }
  }, [cyclesData, selectedCycleId]);

  // Fetch real metrics from new API
  const { data: metrics, isLoading, refetch } = useQuery({
    queryKey: ['test-executive-metrics', selectedCycleId, selectedLob],
    queryFn: async () => {
      if (!selectedCycleId) return null;
      try {
        const response = await metricsApi.getTestExecutiveMetrics(
          selectedCycleId,
          selectedLob !== 'all' ? selectedLob : undefined
        );
        return response.data;
      } catch (error) {
        console.error('Error fetching test executive metrics:', error);
        return null;
      }
    },
    enabled: !!selectedCycleId,
    refetchInterval: 60000, // Refresh every minute
  });

  // Fetch comparison metrics
  const { data: comparisonMetrics } = useQuery({
    queryKey: ['test-executive-comparison-metrics', comparisonCycleId],
    queryFn: async () => {
      if (!comparisonCycleId) return null;
      try {
        const response = await metricsApi.getTestExecutiveMetrics(comparisonCycleId);
        return response.data;
      } catch (error) {
        console.error('Error fetching comparison metrics:', error);
        return null;
      }
    },
    enabled: !!comparisonCycleId && showComparison,
  });

  const handleRefresh = () => {
    refetch();
  };

  const formatDuration = (hours: number) => {
    if (hours < 24) return `${Math.round(hours)}h`;
    return `${Math.round(hours / 24)}d`;
  };

  const getPerformanceColor = (rate: number) => {
    if (rate >= 90) return 'success';
    if (rate >= 70) return 'warning';
    return 'error';
  };

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Box>
            <Typography variant="h4" gutterBottom>
              Test Executive Dashboard
            </Typography>
            <Typography variant="body2" color="text.secondary">
              Comprehensive view of testing operations and team performance
            </Typography>
          </Box>
          <Box display="flex" gap={2} alignItems="center">
            {/* Cycle Selector */}
            {cyclesData && cyclesData.length > 0 && (
              <FormControl size="small" sx={{ minWidth: 200 }}>
                <InputLabel>Test Cycle</InputLabel>
                <Select
                  value={selectedCycleId || ''}
                  label="Test Cycle"
                  onChange={(e) => setSelectedCycleId(e.target.value)}
                >
                  {cyclesData.map((cycle: any) => (
                    <MenuItem key={cycle.cycle_id} value={cycle.cycle_id}>
                      {cycle.cycle_name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            )}
            
            {/* LOB Filter */}
            <FormControl size="small" sx={{ minWidth: 150 }}>
              <InputLabel>LOB Filter</InputLabel>
              <Select
                value={selectedLob}
                label="LOB Filter"
                onChange={(e) => setSelectedLob(e.target.value)}
              >
                <MenuItem value="all">All LOBs</MenuItem>
                {metrics?.available_lobs?.map((lob: string) => (
                  <MenuItem key={lob} value={lob}>{lob}</MenuItem>
                ))}
              </Select>
            </FormControl>
            
            <Tooltip title="Compare Cycles">
              <IconButton
                onClick={() => setShowComparison(!showComparison)}
                color={showComparison ? 'primary' : 'default'}
              >
                <CompareArrows />
              </IconButton>
            </Tooltip>
            
            <IconButton onClick={handleRefresh} disabled={isLoading}>
              <RefreshIcon />
            </IconButton>
          </Box>
        </Box>
      </Paper>

      {isLoading && (
        <Box display="flex" justifyContent="center" p={4}>
          <CircularProgress />
        </Box>
      )}

      {metrics && (
        <>
          {/* Key Metrics Overview */}
          <Grid container spacing={3} sx={{ mb: 4 }}>
            <Grid size={{ xs: 12, sm: 6, md: 2 }}>
              <Card>
                <CardContent>
                  <Typography color="textSecondary" gutterBottom variant="body2">
                    Total Reports
                  </Typography>
                  <Typography variant="h4">
                    {metrics.cycle_summary?.total_reports || 0}
                  </Typography>
                  {showComparison && comparisonMetrics && (
                    <Typography variant="caption" color={
                      (metrics.cycle_summary?.total_reports || 0) > 
                      (comparisonMetrics.cycle_summary?.total_reports || 0) 
                        ? 'success.main' : 'error.main'
                    }>
                      vs {comparisonMetrics.cycle_summary?.total_reports || 0}
                    </Typography>
                  )}
                </CardContent>
              </Card>
            </Grid>

            <Grid size={{ xs: 12, sm: 6, md: 2 }}>
              <Card>
                <CardContent>
                  <Typography color="textSecondary" gutterBottom variant="body2">
                    Completion
                  </Typography>
                  <Typography variant="h4" color="primary">
                    {Math.round(metrics.cycle_summary?.completion_rate || 0)}%
                  </Typography>
                  <LinearProgress
                    variant="determinate"
                    value={metrics.cycle_summary?.completion_rate || 0}
                    sx={{ mt: 1 }}
                  />
                </CardContent>
              </Card>
            </Grid>

            <Grid size={{ xs: 12, sm: 6, md: 2 }}>
              <Card>
                <CardContent>
                  <Typography color="textSecondary" gutterBottom variant="body2">
                    SLA Compliance
                  </Typography>
                  <Typography variant="h4" color="success.main">
                    {Math.round(metrics.sla_summary?.compliance_rate || 0)}%
                  </Typography>
                  <Typography variant="caption">
                    {metrics.sla_summary?.met_count || 0} met
                  </Typography>
                </CardContent>
              </Card>
            </Grid>

            <Grid size={{ xs: 12, sm: 6, md: 2 }}>
              <Card>
                <CardContent>
                  <Typography color="textSecondary" gutterBottom variant="body2">
                    At Risk
                  </Typography>
                  <Typography variant="h4" color="warning.main">
                    {metrics.sla_summary?.at_risk_count || 0}
                  </Typography>
                  <Typography variant="caption">
                    reports
                  </Typography>
                </CardContent>
              </Card>
            </Grid>

            <Grid size={{ xs: 12, sm: 6, md: 2 }}>
              <Card>
                <CardContent>
                  <Typography color="textSecondary" gutterBottom variant="body2">
                    Violations
                  </Typography>
                  <Typography variant="h4" color="error.main">
                    {metrics.sla_summary?.violations || 0}
                  </Typography>
                  <Typography variant="caption">
                    SLA breaches
                  </Typography>
                </CardContent>
              </Card>
            </Grid>

            <Grid size={{ xs: 12, sm: 6, md: 2 }}>
              <Card>
                <CardContent>
                  <Typography color="textSecondary" gutterBottom variant="body2">
                    Avg Duration
                  </Typography>
                  <Typography variant="h4" color="info.main">
                    {metrics.cycle_summary?.avg_duration_days 
                      ? `${Math.round(metrics.cycle_summary.avg_duration_days)}d`
                      : 'N/A'}
                  </Typography>
                  <Typography variant="caption">
                    per report
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          </Grid>

          {/* Tabs for Different Views */}
          <Paper sx={{ mb: 3 }}>
            <Tabs value={tabValue} onChange={(_, newValue) => setTabValue(newValue)}>
              <Tab label="Team Performance" />
              <Tab label="Phase Analysis" />
              <Tab label="Quality Metrics" />
              <Tab label="Trend Analysis" />
            </Tabs>
          </Paper>

          {/* Team Performance Tab */}
          <TabPanel value={tabValue} index={0}>
            <Grid container spacing={3}>
              <Grid size={12}>
                <Paper sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Team Performance Summary
                  </Typography>
                  
                  {metrics.team_performance && (
                    <>
                      <Box display="flex" gap={3} mb={3}>
                        <Card variant="outlined">
                          <CardContent>
                            <Typography color="textSecondary" gutterBottom>
                              Team Size
                            </Typography>
                            <Typography variant="h5">
                              {metrics.team_performance.active_testers || 0}
                            </Typography>
                          </CardContent>
                        </Card>
                        <Card variant="outlined">
                          <CardContent>
                            <Typography color="textSecondary" gutterBottom>
                              Avg Workload
                            </Typography>
                            <Typography variant="h5">
                              {Math.round(metrics.team_performance.avg_workload || 0)}
                            </Typography>
                          </CardContent>
                        </Card>
                        <Card variant="outlined">
                          <CardContent>
                            <Typography color="textSecondary" gutterBottom>
                              Avg Completion
                            </Typography>
                            <Typography variant="h5">
                              {Math.round(metrics.team_performance.avg_completion_rate || 0)}%
                            </Typography>
                          </CardContent>
                        </Card>
                      </Box>

                      <TableContainer>
                        <Table>
                          <TableHead>
                            <TableRow>
                              <TableCell>Tester</TableCell>
                              <TableCell align="center">Assigned</TableCell>
                              <TableCell align="center">Completed</TableCell>
                              <TableCell align="center">In Progress</TableCell>
                              <TableCell align="center">Completion Rate</TableCell>
                              <TableCell align="center">Avg Time</TableCell>
                              <TableCell align="center">Performance</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {metrics.team_performance.testers?.map((tester: any) => (
                              <TableRow key={tester.tester_id}>
                                <TableCell>{tester.tester_name}</TableCell>
                                <TableCell align="center">{tester.assigned_reports}</TableCell>
                                <TableCell align="center">{tester.completed_reports}</TableCell>
                                <TableCell align="center">{tester.in_progress_reports}</TableCell>
                                <TableCell align="center">
                                  <Box display="flex" alignItems="center" justifyContent="center" gap={1}>
                                    <LinearProgress
                                      variant="determinate"
                                      value={tester.completion_rate}
                                      sx={{ width: 60, height: 6 }}
                                    />
                                    <Typography variant="body2">
                                      {Math.round(tester.completion_rate)}%
                                    </Typography>
                                  </Box>
                                </TableCell>
                                <TableCell align="center">
                                  {formatDuration(tester.avg_completion_time)}
                                </TableCell>
                                <TableCell align="center">
                                  <Chip
                                    label={
                                      tester.completion_rate >= 90 ? 'Excellent' :
                                      tester.completion_rate >= 70 ? 'Good' : 'Needs Improvement'
                                    }
                                    color={getPerformanceColor(tester.completion_rate)}
                                    size="small"
                                  />
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </>
                  )}
                </Paper>
              </Grid>
            </Grid>
          </TabPanel>

          {/* Phase Analysis Tab */}
          <TabPanel value={tabValue} index={1}>
            <Grid container spacing={3}>
              <Grid size={{ xs: 12, md: 8 }}>
                <Paper sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Phase Duration Trends
                  </Typography>
                  {metrics.phase_trends && metrics.phase_trends.length > 0 && (
                    <Box sx={{ height: 400 }}>
                      <Line
                        data={{
                          labels: metrics.phase_trends[0]?.trend_data.map((d: any) => d.date) || [],
                          datasets: metrics.phase_trends.map((phase: any, index: number) => ({
                            label: phase.phase_name,
                            data: phase.trend_data.map((d: any) => d.avg_duration_hours),
                            borderColor: [
                              'rgb(75, 192, 192)',
                              'rgb(255, 99, 132)',
                              'rgb(54, 162, 235)',
                              'rgb(255, 205, 86)',
                              'rgb(153, 102, 255)',
                              'rgb(255, 159, 64)',
                              'rgb(201, 203, 207)'
                            ][index % 7],
                            tension: 0.1
                          }))
                        }}
                        options={{
                          responsive: true,
                          maintainAspectRatio: false,
                          plugins: {
                            legend: {
                              position: 'top' as const,
                            },
                            title: {
                              display: false,
                            }
                          },
                          scales: {
                            y: {
                              beginAtZero: true,
                              title: {
                                display: true,
                                text: 'Duration (hours)'
                              }
                            }
                          }
                        }}
                      />
                    </Box>
                  )}
                </Paper>
              </Grid>

              <Grid size={{ xs: 12, md: 4 }}>
                <Paper sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Phase Bottlenecks
                  </Typography>
                  {metrics.bottlenecks?.map((bottleneck: any, index: number) => (
                    <Box key={index} sx={{ mb: 2 }}>
                      <Box display="flex" justifyContent="space-between" alignItems="center">
                        <Typography variant="body2">
                          {bottleneck.phase_name}
                        </Typography>
                        <Chip
                          label={`${formatDuration(bottleneck.avg_duration)}`}
                          color={bottleneck.severity === 'critical' ? 'error' : 'warning'}
                          size="small"
                        />
                      </Box>
                      <Typography variant="caption" color="text.secondary">
                        {bottleneck.stuck_reports} reports stuck
                      </Typography>
                      <LinearProgress
                        variant="determinate"
                        value={(bottleneck.stuck_reports / metrics.cycle_summary?.total_reports) * 100}
                        color={bottleneck.severity === 'critical' ? 'error' : 'warning'}
                        sx={{ mt: 1 }}
                      />
                    </Box>
                  ))}
                </Paper>
              </Grid>
            </Grid>
          </TabPanel>

          {/* Quality Metrics Tab */}
          <TabPanel value={tabValue} index={2}>
            <Grid container spacing={3}>
              <Grid size={12}>
                <Paper sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Quality Metrics Overview
                  </Typography>
                  
                  <Grid container spacing={3}>
                    <Grid size={{ xs: 12, sm: 6, md: 3 }}>
                      <Card variant="outlined">
                        <CardContent>
                          <Typography color="textSecondary" gutterBottom>
                            Error Rate
                          </Typography>
                          <Typography variant="h4" color={
                            (metrics.aggregate_metrics?.error_rate || 0) < 5 ? 'success.main' : 'error.main'
                          }>
                            {(metrics.aggregate_metrics?.error_rate || 0).toFixed(1)}%
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                    
                    <Grid size={{ xs: 12, sm: 6, md: 3 }}>
                      <Card variant="outlined">
                        <CardContent>
                          <Typography color="textSecondary" gutterBottom>
                            First Pass Rate
                          </Typography>
                          <Typography variant="h4" color="primary">
                            {Math.round(metrics.quality_metrics?.first_pass_rate || 0)}%
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                    
                    <Grid size={{ xs: 12, sm: 6, md: 3 }}>
                      <Card variant="outlined">
                        <CardContent>
                          <Typography color="textSecondary" gutterBottom>
                            Rework Rate
                          </Typography>
                          <Typography variant="h4" color="warning.main">
                            {(metrics.quality_metrics?.rework_rate || 0).toFixed(1)}%
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                    
                    <Grid size={{ xs: 12, sm: 6, md: 3 }}>
                      <Card variant="outlined">
                        <CardContent>
                          <Typography color="textSecondary" gutterBottom>
                            Quality Score
                          </Typography>
                          <Typography variant="h4" color="success.main">
                            {Math.round(metrics.quality_metrics?.quality_score || 0)}/100
                          </Typography>
                        </CardContent>
                      </Card>
                    </Grid>
                  </Grid>

                  {/* Quality by LOB */}
                  {metrics.quality_by_lob && (
                    <Box sx={{ mt: 4 }}>
                      <Typography variant="subtitle1" gutterBottom>
                        Quality Metrics by LOB
                      </Typography>
                      <TableContainer>
                        <Table>
                          <TableHead>
                            <TableRow>
                              <TableCell>LOB</TableCell>
                              <TableCell align="center">Error Rate</TableCell>
                              <TableCell align="center">First Pass Rate</TableCell>
                              <TableCell align="center">Observations</TableCell>
                              <TableCell align="center">Critical Issues</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {metrics.quality_by_lob.map((lob: any) => (
                              <TableRow key={lob.lob_name}>
                                <TableCell>{lob.lob_name}</TableCell>
                                <TableCell align="center">
                                  <Chip
                                    label={`${lob.error_rate.toFixed(1)}%`}
                                    color={lob.error_rate < 5 ? 'success' : 'error'}
                                    size="small"
                                  />
                                </TableCell>
                                <TableCell align="center">
                                  {Math.round(lob.first_pass_rate)}%
                                </TableCell>
                                <TableCell align="center">
                                  {lob.total_observations}
                                </TableCell>
                                <TableCell align="center">
                                  {lob.critical_issues > 0 && (
                                    <Chip
                                      label={lob.critical_issues}
                                      color="error"
                                      size="small"
                                    />
                                  )}
                                </TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </Box>
                  )}
                </Paper>
              </Grid>
            </Grid>
          </TabPanel>

          {/* Trend Analysis Tab */}
          <TabPanel value={tabValue} index={3}>
            <Grid container spacing={3}>
              <Grid size={{ xs: 12, md: 6 }}>
                <Paper sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    Completion Rate Trend
                  </Typography>
                  {metrics.trends?.completion_trend && (
                    <Box sx={{ height: 300 }}>
                      <Line
                        data={{
                          labels: metrics.trends.completion_trend.map((d: any) => d.date),
                          datasets: [{
                            label: 'Completion Rate',
                            data: metrics.trends.completion_trend.map((d: any) => d.rate),
                            borderColor: 'rgb(75, 192, 192)',
                            backgroundColor: 'rgba(75, 192, 192, 0.5)',
                          }]
                        }}
                        options={{
                          responsive: true,
                          maintainAspectRatio: false,
                          scales: {
                            y: {
                              beginAtZero: true,
                              max: 100,
                              title: {
                                display: true,
                                text: 'Completion Rate (%)'
                              }
                            }
                          }
                        }}
                      />
                    </Box>
                  )}
                </Paper>
              </Grid>

              <Grid size={{ xs: 12, md: 6 }}>
                <Paper sx={{ p: 3 }}>
                  <Typography variant="h6" gutterBottom>
                    SLA Compliance Trend
                  </Typography>
                  {metrics.trends?.sla_trend && (
                    <Box sx={{ height: 300 }}>
                      <Line
                        data={{
                          labels: metrics.trends.sla_trend.map((d: any) => d.date),
                          datasets: [{
                            label: 'SLA Compliance',
                            data: metrics.trends.sla_trend.map((d: any) => d.compliance_rate),
                            borderColor: 'rgb(54, 162, 235)',
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                          }]
                        }}
                        options={{
                          responsive: true,
                          maintainAspectRatio: false,
                          scales: {
                            y: {
                              beginAtZero: true,
                              max: 100,
                              title: {
                                display: true,
                                text: 'Compliance Rate (%)'
                              }
                            }
                          }
                        }}
                      />
                    </Box>
                  )}
                </Paper>
              </Grid>
            </Grid>
          </TabPanel>
        </>
      )}

      {/* Comparison Dialog */}
      <Dialog
        open={showComparison && !comparisonCycleId}
        onClose={() => setShowComparison(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Select Cycle for Comparison</DialogTitle>
        <DialogContent>
          <FormControl fullWidth sx={{ mt: 2 }}>
            <InputLabel>Compare with Cycle</InputLabel>
            <Select
              value={comparisonCycleId || ''}
              label="Compare with Cycle"
              onChange={(e) => setComparisonCycleId(e.target.value)}
            >
              {cyclesData
                ?.filter((c: any) => c.cycle_id !== selectedCycleId)
                .map((cycle: any) => (
                  <MenuItem key={cycle.cycle_id} value={cycle.cycle_id}>
                    {cycle.cycle_name}
                  </MenuItem>
                ))}
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowComparison(false)}>Cancel</Button>
          <Button
            onClick={() => setShowComparison(true)}
            variant="contained"
            disabled={!comparisonCycleId}
          >
            Compare
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default TestExecutiveDashboardEnhanced;