import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  LinearProgress,
  Alert,
  Chip,
  Button,
  IconButton,
  Tooltip,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  CircularProgress,
  Card,
  CardContent,
  Stack,
  TextField,
  InputAdornment,
  Grid,
  useTheme,
  alpha,
} from '@mui/material';
import {
  Visibility,
  PlayArrow,
  Schedule,
  CheckCircle,
  Warning,
  Assignment,
  Search,
  FilterList,
  CalendarToday,
  Assessment,
  Timer,
  BugReport,
  Edit,
  OpenInNew,
} from '@mui/icons-material';
import { useAuth } from '../contexts/AuthContext';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import { reportsApi } from '../api/reports';
import { AssignedReport } from '../types/api';
import apiClient from '../api/client';
import { useNotifications } from '../contexts/NotificationContext';

const MyAssignmentsPage: React.FC = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  const theme = useTheme();
  const queryClient = useQueryClient();
  const { showToast } = useNotifications();
  const [selectedCycleId, setSelectedCycleId] = useState<string>('all');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');

  // Get tester's assigned reports
  const { data: assignedReports, isLoading: reportsLoading } = useQuery({
    queryKey: ['my-assignments', user?.user_id],
    queryFn: async () => {
      try {
        const reports = await reportsApi.getByTester(user?.user_id || 0);
        return reports || [];
      } catch (error) {
        console.error('Error fetching assigned reports:', error);
        return [];
      }
    },
    enabled: !!user?.user_id,
  });

  // Mutation to start workflow for a report
  const startWorkflowMutation = useMutation({
    mutationFn: async ({ cycleId, reportId }: { cycleId: number; reportId: number }) => {
      const response = await apiClient.post(`/cycles/${cycleId}/reports/${reportId}/start-workflow`);
      return response.data;
    },
    onSuccess: (data, variables) => {
      showToast('success', 'Testing workflow started successfully!');
      // Refresh the assignments data
      queryClient.invalidateQueries({ queryKey: ['tester-assigned-reports'] });
      // Navigate to the planning phase
      navigate(`/cycles/${variables.cycleId}/reports/${variables.reportId}/planning`);
    },
    onError: (error: any) => {
      console.error('Error starting workflow:', error);
      showToast('error', `Failed to start testing: ${error.response?.data?.detail || error.message}`);
    },
  });

  // Get cycles where tester has assignments - derived from assigned reports
  const cyclesWithAssignments = React.useMemo(() => {
    if (!assignedReports) return [];
    
    // Get unique cycles from assigned reports
    const uniqueCycles = Array.from(
      new Map(
        assignedReports.map((report: AssignedReport) => [
          report.cycle_id,
          {
            cycle_id: report.cycle_id,
            cycle_name: report.cycle_name || `Cycle ${report.cycle_id}`,
          }
        ])
      ).values()
    );
    
    return uniqueCycles;
  }, [assignedReports]);

  // Filter assignments based on cycle, status, and search
  const filteredAssignments = React.useMemo(() => {
    let filtered = assignedReports || [];

    // Filter by cycle
    if (selectedCycleId !== 'all') {
      filtered = filtered.filter((report: AssignedReport) => 
        report.cycle_id.toString() === selectedCycleId
      );
    }

    // Filter by status
    if (statusFilter !== 'all') {
      filtered = filtered.filter((report: AssignedReport) => 
        report.status === statusFilter
      );
    }

    // Filter by search term
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      filtered = filtered.filter((report: AssignedReport) =>
        report.report_name?.toLowerCase().includes(searchLower) ||
        report.lob_name?.toLowerCase().includes(searchLower) ||
        report.current_phase?.toLowerCase().includes(searchLower)
      );
    }

    return filtered;
  }, [assignedReports, selectedCycleId, statusFilter, searchTerm]);

  // Calculate summary statistics
  const summaryStats = React.useMemo(() => {
    const total = filteredAssignments.length;
    const active = filteredAssignments.filter(r => 
      r.status === 'Active' || r.status === 'In Progress'
    ).length;
    const completed = filteredAssignments.filter(r => 
      r.status === 'Completed'
    ).length;
    const pending = filteredAssignments.filter(r => 
      r.status === 'Pending' || r.status === 'Not Started'
    ).length;
    const atRisk = filteredAssignments.filter(r => 
      r.status === 'At Risk' || r.status === 'Behind Schedule'
    ).length;

    return { total, active, completed, pending, atRisk };
  }, [filteredAssignments]);

  const getStatusColor = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return 'success';
      case 'active':
      case 'in progress':
        return 'primary';
      case 'pending':
      case 'not started':
        return 'warning';
      case 'at risk':
      case 'behind schedule':
        return 'error';
      default:
        return 'default';
    }
  };

  const getPhaseIcon = (phase: string) => {
    switch (phase?.toLowerCase()) {
      case 'planning':
        return <Assignment />;
      case 'scoping':
        return <FilterList />;
      case 'data provider identification':
        return <Assignment />;
      case 'sample selection':
        return <CheckCircle />;
      case 'request for information':
        return <Assessment />;
      case 'testing execution':
        return <PlayArrow />;
      case 'observation management':
        return <BugReport />;
      default:
        return <Schedule />;
    }
  };

  const handleViewReport = (report: AssignedReport) => {
    // Navigate to the report details page showing overview and all phases
    navigate(`/cycles/${report.cycle_id}/reports/${report.report_id}`);
  };

  const handleViewCycle = (cycleId: number) => {
    navigate(`/cycles/${cycleId}`);
  };

  if (reportsLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* Header */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" gutterBottom fontWeight="bold">
          My Assignments
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Manage and track your assigned testing reports across all cycles.
        </Typography>
      </Box>

      {/* Summary Cards */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid size={{ xs: 12, sm: 6, md: 2.4 }}>
          <Card sx={{ textAlign: 'center' }}>
            <CardContent>
              <Typography variant="h4" color="primary.main" fontWeight="bold">
                {summaryStats.total}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Total Assignments
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, sm: 6, md: 2.4 }}>
          <Card sx={{ textAlign: 'center' }}>
            <CardContent>
              <Typography variant="h4" color="info.main" fontWeight="bold">
                {summaryStats.active}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Active
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, sm: 6, md: 2.4 }}>
          <Card sx={{ textAlign: 'center' }}>
            <CardContent>
              <Typography variant="h4" color="success.main" fontWeight="bold">
                {summaryStats.completed}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Completed
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, sm: 6, md: 2.4 }}>
          <Card sx={{ textAlign: 'center' }}>
            <CardContent>
              <Typography variant="h4" color="warning.main" fontWeight="bold">
                {summaryStats.pending}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Pending
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid size={{ xs: 12, sm: 6, md: 2.4 }}>
          <Card sx={{ textAlign: 'center' }}>
            <CardContent>
              <Typography variant="h4" color="error.main" fontWeight="bold">
                {summaryStats.atRisk}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                At Risk
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Filters */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} alignItems="center">
          <TextField
            placeholder="Search assignments..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <Search />
                </InputAdornment>
              ),
            }}
            sx={{ minWidth: 300 }}
          />
          
          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>Test Cycle</InputLabel>
            <Select
              value={selectedCycleId}
              label="Test Cycle"
              onChange={(e) => setSelectedCycleId(e.target.value)}
            >
              <MenuItem value="all">All Cycles</MenuItem>
              {cyclesWithAssignments.map((cycle: any) => (
                <MenuItem key={cycle.cycle_id} value={cycle.cycle_id.toString()}>
                  {cycle.cycle_name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          <FormControl sx={{ minWidth: 150 }}>
            <InputLabel>Status</InputLabel>
            <Select
              value={statusFilter}
              label="Status"
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <MenuItem value="all">All Status</MenuItem>
              <MenuItem value="Active">Active</MenuItem>
              <MenuItem value="In Progress">In Progress</MenuItem>
              <MenuItem value="Completed">Completed</MenuItem>
              <MenuItem value="Pending">Pending</MenuItem>
              <MenuItem value="At Risk">At Risk</MenuItem>
              <MenuItem value="Behind Schedule">Behind Schedule</MenuItem>
            </Select>
          </FormControl>
        </Stack>
      </Paper>

      {/* Assignments Table */}
      <Paper>
        <TableContainer>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Report</TableCell>
                <TableCell>Test Cycle</TableCell>
                <TableCell>LOB</TableCell>
                <TableCell>Current Phase</TableCell>
                <TableCell>Status</TableCell>
                <TableCell>Progress</TableCell>
                <TableCell>Issues</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredAssignments.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={8} align="center">
                    <Alert severity="info">
                      {searchTerm || selectedCycleId !== 'all' || statusFilter !== 'all'
                        ? 'No assignments match your current filters.'
                        : 'No assignments found. Contact your test manager if you expect to have assignments.'
                      }
                    </Alert>
                  </TableCell>
                </TableRow>
              ) : (
                filteredAssignments.map((report: AssignedReport) => (
                  <TableRow key={`${report.cycle_id}-${report.report_id}`} hover>
                    <TableCell>
                      <Box>
                        <Typography variant="subtitle2" fontWeight="medium">
                          {report.report_name}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          ID: {report.report_id}
                        </Typography>
                      </Box>
                    </TableCell>
                    
                    <TableCell>
                      <Button
                        variant="text"
                        size="small"
                        onClick={() => handleViewCycle(report.cycle_id)}
                        startIcon={<CalendarToday />}
                      >
                        {report.cycle_name || `Cycle ${report.cycle_id}`}
                      </Button>
                    </TableCell>
                    
                    <TableCell>
                      <Chip 
                        label={report.lob_name || 'Unknown'} 
                        size="small"
                        variant="outlined"
                      />
                    </TableCell>
                    
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
                        {getPhaseIcon(report.current_phase || '')}
                        <Typography variant="body2" sx={{ ml: 1 }}>
                          {report.current_phase || 'Unknown'}
                        </Typography>
                      </Box>
                    </TableCell>
                    
                    <TableCell>
                      <Chip 
                        label={report.status || 'Unknown'} 
                        color={getStatusColor(report.status || '') as any}
                        size="small"
                      />
                    </TableCell>
                    
                    <TableCell>
                      <Box sx={{ width: 100 }}>
                        <LinearProgress 
                          variant="determinate" 
                          value={report.overall_progress || 0}
                          sx={{ mb: 0.5 }}
                        />
                        <Typography variant="caption">
                          {report.overall_progress || 0}%
                        </Typography>
                      </Box>
                    </TableCell>
                    
                    <TableCell>
                      {(report.issues_count || 0) > 0 ? (
                        <Chip 
                          icon={<Warning />}
                          label={report.issues_count}
                          color="error"
                          size="small"
                        />
                      ) : (
                        <Typography variant="body2" color="text.secondary">
                          None
                        </Typography>
                      )}
                    </TableCell>
                    
                    <TableCell>
                      {report.phase_status === 'not_started' || report.next_action === 'Start Testing' ? (
                        <Tooltip title="Start Testing">
                          <IconButton 
                            size="small" 
                            onClick={() => startWorkflowMutation.mutate({ 
                              cycleId: report.cycle_id, 
                              reportId: report.report_id 
                            })}
                            color="success"
                            disabled={startWorkflowMutation.isPending}
                          >
                            <PlayArrow />
                          </IconButton>
                        </Tooltip>
                      ) : (
                        <Tooltip title="View Report">
                          <IconButton 
                            size="small" 
                            onClick={() => handleViewReport(report)}
                            color="primary"
                          >
                            <Visibility />
                          </IconButton>
                        </Tooltip>
                      )}
                      <Tooltip title="Open in New Tab">
                        <IconButton 
                          size="small" 
                          onClick={() => {
                            const phase = report.current_phase?.toLowerCase().replace(/\s+/g, '-');
                            window.open(`/cycles/${report.cycle_id}/reports/${report.report_id}/${phase}`, '_blank');
                          }}
                          color="primary"
                        >
                          <OpenInNew />
                        </IconButton>
                      </Tooltip>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </Paper>
    </Box>
  );
};

export default MyAssignmentsPage;